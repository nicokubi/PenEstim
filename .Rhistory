log_prior_threshold_male <- dunif(scaled_threshold_male, prior_params$threshold$min, prior_params$threshold$max, log = TRUE)
log_prior_threshold_female <- dunif(scaled_threshold_female, prior_params$threshold$min, prior_params$threshold$max, log = TRUE)
log_prior_median_male <- dbeta(scaled_median_male, prior_params$median$m1, prior_params$median$m2, log = TRUE)
log_prior_median_female <- dbeta(scaled_median_female, prior_params$median$m1, prior_params$median$m2, log = TRUE)
log_prior_first_quartile_male <- dbeta(scaled_first_quartile_male, prior_params$first_quartile$q1, prior_params$first_quartile$q2, log = TRUE)
log_prior_first_quartile_female <- dbeta(scaled_first_quartile_female, prior_params$first_quartile$q1, prior_params$first_quartile$q2, log = TRUE)
log_prior_total <- log_prior_asymptote_male + log_prior_asymptote_female +
log_prior_threshold_male + log_prior_threshold_female +
log_prior_median_male + log_prior_median_female +
log_prior_first_quartile_male + log_prior_first_quartile_female
} else {
scaled_asymptote <- params$asymptote
scaled_threshold <- params$threshold
scaled_median <- (params$median - params$threshold) / (max_age - params$threshold)
scaled_first_quartile <- (params$first_quartile - params$threshold) /
(params$median - params$threshold)
log_prior_asymptote <- dbeta(scaled_asymptote, prior_params$asymptote$g1, prior_params$asymptote$g2, log = TRUE)
log_prior_threshold <- dunif(scaled_threshold, prior_params$threshold$min, prior_params$threshold$max, log = TRUE)
log_prior_median <- dbeta(scaled_median, prior_params$median$m1, prior_params$median$m2, log = TRUE)
log_prior_first_quartile <- dbeta(scaled_first_quartile, prior_params$first_quartile$q1, prior_params$first_quartile$q2, log = TRUE)
log_prior_total <- log_prior_asymptote + log_prior_threshold + log_prior_median + log_prior_first_quartile
}
return(log_prior_total)
}
num_rejections <- 0
cat("Starting Chain", chain_id, "\n")
# Main loop of Metropolis-Hastings algorithm
for (i in 1:n_iter) {
if (sex_specific) {
# Calculate Weibull parameters for male and female
weibull_params_male <- calculate_weibull_parameters(params_current$median_male, params_current$first_quartile_male, params_current$threshold_male)
weibull_params_female <- calculate_weibull_parameters(params_current$median_female, params_current$first_quartile_female, params_current$threshold_female)
# Impute ages at each iteration based on current parameters
if (age_imputation) {
data <- imputeAges(
data = data,
na_indices = na_indices,
baseline_male = baseline_male_df,
baseline_female = baseline_female_df,
alpha_male = weibull_params_male$alpha,
beta_male = weibull_params_male$beta,
delta_male = params_current$threshold_male,
alpha_female = weibull_params_female$alpha,
beta_female = weibull_params_female$beta,
delta_female = params_current$threshold_female,
empirical_density = age_density,
max_age = max_age,
sex_specific = TRUE
)
}
# Current parameter vector for sex-specific model
params_vector <- c(
params_current$asymptote_male, params_current$asymptote_female,
params_current$threshold_male, params_current$threshold_female,
params_current$median_male, params_current$median_female,
params_current$first_quartile_male, params_current$first_quartile_female
)
# Draw Proposals
proposal_vector <- mvrnorm(1, mu = params_vector, Sigma = C)
# Ensure the proposals for the asymptote fall within the 0 to 1 range
proposal_vector[1] <- ifelse(proposal_vector[1] < 0, -proposal_vector[1],
ifelse(proposal_vector[1] > 1, 2 - proposal_vector[1], proposal_vector[1]))
proposal_vector[2] <- ifelse(proposal_vector[2] < 0, -proposal_vector[2],
ifelse(proposal_vector[2] > 1, 2 - proposal_vector[2], proposal_vector[2]))
# Record proposals
out$asymptote_male_proposals[i] <- proposal_vector[1]
out$asymptote_female_proposals[i] <- proposal_vector[2]
out$threshold_male_proposals[i] <- proposal_vector[3]
out$threshold_female_proposals[i] <- proposal_vector[4]
out$median_male_proposals[i] <- proposal_vector[5]
out$median_female_proposals[i] <- proposal_vector[6]
out$first_quartile_male_proposals[i] <- proposal_vector[7]
out$first_quartile_female_proposals[i] <- proposal_vector[8]
params_proposal <- list(
asymptote_male = proposal_vector[1],
asymptote_female = proposal_vector[2],
threshold_male = proposal_vector[3],
threshold_female = proposal_vector[4],
median_male = proposal_vector[5],
median_female = proposal_vector[6],
first_quartile_male = proposal_vector[7],
first_quartile_female = proposal_vector[8]
)
loglikelihood_current <- mhLogLikelihood_clipp(
params_current, data, twins, max_age,
baseline_data, af, BaselineNC, ncores
)
logprior_current <- calculate_log_prior(params_current, prior_distributions, max_age)
} else {
# Non-sex-specific
weibull_params <- calculate_weibull_parameters(params_current$median, params_current$first_quartile, params_current$threshold)
# Impute ages at each iteration based on current parameters
if (age_imputation) {
data <- imputeAges(
data = data,
na_indices = na_indices,
baseline = baseline_df,
alpha = weibull_params$alpha,
beta = weibull_params$beta,
delta = params_current$threshold,
empirical_density = age_density,
max_age = max_age,
sex_specific = FALSE
)
}
# Current parameter vector for non-sex-specific model
params_vector <- c(params_current$asymptote, params_current$threshold, params_current$median, params_current$first_quartile)
# Draw Proposals. Here C is 4x4
proposal_vector <- mvrnorm(1, mu = params_vector, Sigma = C)
# Ensure the proposals for the asymptote fall within the 0 to 1 range
proposal_vector[1] <- ifelse(proposal_vector[1] < 0, -proposal_vector[1],
ifelse(proposal_vector[1] > 1, 2 - proposal_vector[1], proposal_vector[1]))
# Record proposals
out$asymptote_proposals[i] <- proposal_vector[1]
out$threshold_proposals[i] <- proposal_vector[2]
out$median_proposals[i] <- proposal_vector[3]
out$first_quartile_proposals[i] <- proposal_vector[4]
params_proposal <- list(
asymptote = proposal_vector[1],
threshold = proposal_vector[2],
median = proposal_vector[3],
first_quartile = proposal_vector[4]
)
loglikelihood_current <- mhLogLikelihood_clipp_noSex(
params_current, data, twins, max_age, baseline_data, af, BaselineNC, ncores
)
logprior_current <- calculate_log_prior(params_current, prior_distributions, max_age)
}
# Record the outputs of the evaluation for the current set of parameters
out$loglikelihood_current[i] <- loglikelihood_current
out$logprior_current[i] <- logprior_current
# Initialize valid proposal
valid_proposal <- TRUE
# Explicit checks for sex-specific parameters
if (sex_specific) {
# Asymptote checks (male and female must be strictly between 0 and 1)
if (proposal_vector[1] <= 0 || proposal_vector[1] >= 1) valid_proposal <- FALSE
if (proposal_vector[2] <= 0 || proposal_vector[2] >= 1) valid_proposal <- FALSE
# Threshold checks (male and female must be within prior bounds, strictly)
if (proposal_vector[3] <= prior_distributions$prior_params$threshold$min ||
proposal_vector[3] >= prior_distributions$prior_params$threshold$max) valid_proposal <- FALSE
if (proposal_vector[4] <= prior_distributions$prior_params$threshold$min ||
proposal_vector[4] >= prior_distributions$prior_params$threshold$max) valid_proposal <- FALSE
# First quartile must be strictly greater than the threshold (male and female)
if (proposal_vector[7] <= proposal_vector[3]) valid_proposal <- FALSE  # First quartile male <= threshold male
if (proposal_vector[8] <= proposal_vector[4]) valid_proposal <- FALSE  # First quartile female <= threshold female
# Median must be strictly greater than the first quartile (male and female)
if (proposal_vector[5] <= proposal_vector[7]) valid_proposal <- FALSE  # Median male <= first quartile male
if (proposal_vector[6] <= proposal_vector[8]) valid_proposal <- FALSE  # Median female <= first quartile female
# Median should not exceed baseline midpoint or max age (for both male and female)
if (median_max) {
if (proposal_vector[5] >= baseline_mid_male) valid_proposal <- FALSE  # Median male >= baseline midpoint
if (proposal_vector[6] >= baseline_mid_female) valid_proposal <- FALSE  # Median female >= baseline midpoint
} else {
if (proposal_vector[5] >= max_age) valid_proposal <- FALSE  # Median male >= max age
if (proposal_vector[6] >= max_age) valid_proposal <- FALSE  # Median female >= max age
}
} else {
# Non-sex-specific proposal checks
if (proposal_vector[1] <= 0 || proposal_vector[1] >= 1) valid_proposal <- FALSE  # Asymptote must be strictly between 0 and 1
# Threshold check
if (proposal_vector[2] <= prior_distributions$prior_params$threshold$min ||
proposal_vector[2] >= prior_distributions$prior_params$threshold$max) valid_proposal <- FALSE
# First quartile must be strictly greater than the threshold
if (proposal_vector[4] <= proposal_vector[2]) valid_proposal <- FALSE  # First quartile <= threshold
# Median must be strictly greater than the first quartile
if (proposal_vector[3] <= proposal_vector[4]) valid_proposal <- FALSE  # Median <= first quartile
# Median baseline check
if (median_max) {
if (proposal_vector[3] >= baseline_mid) valid_proposal <- FALSE  # Median >= baseline midpoint
} else {
if (proposal_vector[3] >= max_age) valid_proposal <- FALSE  # Median >= max age
}
}
# If valid proposal, calculate the acceptance ratio and store
if (valid_proposal) {
if (sex_specific) {
loglikelihood_proposal <- mhLogLikelihood_clipp(
params_proposal, data, twins, max_age,
baseline_data, af, BaselineNC, ncores
)
} else {
loglikelihood_proposal <- mhLogLikelihood_clipp_noSex(
params_proposal, data, twins, max_age, baseline_data, af, BaselineNC, ncores
)
}
logprior_proposal <- calculate_log_prior(params_proposal, prior_distributions, max_age)
log_acceptance_ratio <- (loglikelihood_proposal + logprior_proposal) - (loglikelihood_current + logprior_current)
# Metropolis-Hastings acceptance step
if (log(runif(1)) < log_acceptance_ratio) {
params_current <- params_proposal
} else {
num_rejections <- num_rejections + 1
}
# Record
out$loglikelihood_proposal[i] <- loglikelihood_proposal
out$logprior_proposal[i] <- logprior_proposal
out$acceptance_ratio[i] <- log_acceptance_ratio
} else {
# Proposal rejected without calculating log-likelihood
num_rejections <- num_rejections + 1
}
current_states[[i]] <- params_vector
if (i > max(burn_in * n_iter, 3)) {
C <- sd * cov(do.call(rbind, current_states)) + eps * sd * diag(num_pars)
}
# Store current parameters in the output (same as before)
if (sex_specific) {
out$asymptote_male_samples[i] <- params_current$asymptote_male
out$asymptote_female_samples[i] <- params_current$asymptote_female
out$threshold_male_samples[i] <- params_current$threshold_male
out$threshold_female_samples[i] <- params_current$threshold_female
out$median_male_samples[i] <- params_current$median_male
out$median_female_samples[i] <- params_current$median_female
out$first_quartile_male_samples[i] <- params_current$first_quartile_male
out$first_quartile_female_samples[i] <- params_current$first_quartile_female
} else {
out$asymptote_samples[i] <- params_current$asymptote
out$threshold_samples[i] <- params_current$threshold
out$median_samples[i] <- params_current$median
out$first_quartile_samples[i] <- params_current$first_quartile
}
out$C[[i]] <- C
}
out$rejection_rate <- num_rejections / n_iter
# Return both the main results
return(out)
}
out25 <-mhChain(
seed =999, n_iter=10, burn_in = 0.1, chain_id=2, data=data, ncores = 4, twins = NULL,
max_age=94, af = PPP::PanelPRODatabase$AlleleFrequency[paste0("TP53", "_anyPV"), "nonAJ"],
baseline_data =  base_single,
prior_distributions = prop, remove_proband = FALSE, sex_specific = FALSE,
median_max = TRUE, max_penetrance = 1, age_imputation = TRUE, BaselineNC  = TRUE, var = c(0.1,2,5,5))
#Main Estimation for no sex
system.time(out_1 <- penetrance(
pedigree  = dat_adjusted, twins = NULL, n_chains = 1, n_iter_per_chain = 20,
ncores = 6, baseline_data = baseline_data_default ,
af  = PPP::PanelPRODatabase$AlleleFrequency[paste0("TP53", "_anyPV"), "nonAJ"],
prior_params = prior_params_default, burn_in = 0.1, median_max = TRUE, BaselineNC = FALSE,
age_imputation = TRUE, remove_proband = FALSE, var = c(0.1,0.1,2, 2, 5, 5,5,5), sex_specific = TRUE
))
library(penetrance)
#Run Estimation procedure with default prior setting
#Main Estimation for Female
system.time(out_liftup_Colorectal_v4 <- penetrance(
pedigree  = dat_sampled, twins = NULL, n_chains = 1, n_iter_per_chain = 2000,
baseline_data = baseline_data_default,
af  = PPP::PanelPRODatabase$AlleleFrequency[paste0("TP53", "_anyPV"), "nonAJ"],
prior_params = prior_params, burn_in = 0.1, median_max = TRUE,
age_imputation = TRUE, remove_proband = FALSE, sex_specific = TRUE
))
library(penetrance)
library(PPP)
library(ggplot2)
library(ggridges)
library(ggplot2)
library(dplyr)
library(survival)
library(gridExtra)
library(GGally)
set.seed(2025)
# Load data
dat_original <- read.csv("/Users/nicolaskubista/Partners HealthCare Dropbox/BayesMendel/Projects/Active/LiFTUP/Data/combined.csv")
# Assuming df is your dataframe and variable_name is your column name
value_counts <- table(dat_original$Gender)
print(value_counts)
family_list <- list()
unique_families <- unique(dat_original$Pedigree.name)
for (family_id in unique_families) {
family_data <- dat_original[dat_original$Pedigree.name == family_id, ]
family_list[[length(family_list) + 1]] <- family_data
}
dat <- family_list
summary(dat_original)
# Function to convert columns to the required format
convert_pedigree_format <- function(dat) {
# Loop through each pedigree in the list
for (i in seq_along(dat)) {
# Standardize column names
colnames(dat[[i]])[colnames(dat[[i]]) == "Pedigree.name"] <- "PedigreeID"
colnames(dat[[i]])[colnames(dat[[i]]) == "UPN"] <- "ID"
colnames(dat[[i]])[colnames(dat[[i]]) == "Gender"] <- "Sex"
colnames(dat[[i]])[colnames(dat[[i]]) == "Mother.ID"] <- "MotherID"
colnames(dat[[i]])[colnames(dat[[i]]) == "Father.ID"] <- "FatherID"
colnames(dat[[i]])[colnames(dat[[i]]) == "proband_flag_x"] <- "isProband"
colnames(dat[[i]])[colnames(dat[[i]]) == "Age"] <- "CurAge"
colnames(dat[[i]])[colnames(dat[[i]]) == "Colorectal"] <- "isAff"
colnames(dat[[i]])[colnames(dat[[i]]) == "Colorectal_age_dx"] <- "Age"
colnames(dat[[i]])[colnames(dat[[i]]) == "GT.Pos"] <- "geno"
# Calculate CurAge based on available Year_Birth and death/follow-up information
dat[[i]]$CurAge <- ifelse(!is.na(dat[[i]]$Year_Birth),
ifelse(!is.na(dat[[i]]$YEAR_Death),
dat[[i]]$YEAR_Death - dat[[i]]$Year_Birth,      # Use YEAR_Death for deceased individuals
ifelse(!is.na(dat[[i]]$Year_Last_FolUp),
dat[[i]]$Year_Last_FolUp - dat[[i]]$Year_Birth,  # Use Year_Last_FolUp for alive individuals
ifelse(!is.na(dat[[i]]$Age.at.entrance),
dat[[i]]$Age.at.entrance, # Use Age.at.entrance if no death or follow-up info
dat[[i]]$CurAge))),     # Leave CurAge as is if no information is available
dat[[i]]$CurAge)
# If Year_Birth is missing but Age at entrance is available, estimate CurAge
dat[[i]]$CurAge <- ifelse(is.na(dat[[i]]$Year_Birth) & !is.na(dat[[i]]$Age.at.entrance),
ifelse(!is.na(dat[[i]]$YEAR_Death),
dat[[i]]$Age.at.entrance + (dat[[i]]$YEAR_Death - dat[[i]]$Year_Last_FolUp),  # Use Age.at.entrance for deceased individuals
dat[[i]]$Age.at.entrance),  # Use Age.at.entrance for alive individuals
dat[[i]]$CurAge)
# Handle negative ages
dat[[i]]$CurAge <- ifelse(dat[[i]]$CurAge < 0, NA, dat[[i]]$CurAge)
}
# Return the modified data list
return(dat)
}
# Example usage with your list of pedigrees
dat_adjusted <- convert_pedigree_format(dat)
# Iterate through each data frame in the list dat
for (i in seq_along(dat_adjusted)) {
# Convert "Sex" to numeric where "M" is 1 and "F" is 0
dat_adjusted[[i]]$Sex <- ifelse(dat_adjusted[[i]]$Sex == "M", 1, ifelse(dat_adjusted[[i]]$Sex == "F", 0, NA))
# Remove rows where Sex is NA
dat_adjusted[[i]] <- dat_adjusted[[i]][!is.na(dat_adjusted[[i]]$Sex), ]
# Convert "isProband" to numeric where "proband" is 1, and all other values are 0
dat_adjusted[[i]]$isProband <- ifelse(dat_adjusted[[i]]$isProband == "proband", 1, 0)
# Convert "isAff" to numeric where "True" is 1, and anything else (including NA) is 0
dat_adjusted[[i]]$isAff[is.na(dat_adjusted[[i]]$isAff)] <- 0
dat_adjusted[[i]]$isAff <- ifelse(dat_adjusted[[i]]$isAff == "True", 1, 0)
#Adjust "geno" column: "True" = 1, "False" = 0, NA if unknown
dat_adjusted[[i]]$geno <- ifelse(dat_adjusted[[i]]$geno == "True", 1,
ifelse(dat_adjusted[[i]]$geno == "False", 0, NA))
# Ensure "CurAge" and "Age" are within allowed range (1 to 94)
dat_adjusted[[i]]$CurAge <- ifelse(dat_adjusted[[i]]$CurAge > 94, 94, dat_adjusted[[i]]$CurAge)
dat_adjusted[[i]]$CurAge <- ifelse(dat_adjusted[[i]]$CurAge < 1, 1, dat_adjusted[[i]]$CurAge)
dat_adjusted[[i]]$Age <- ifelse(dat_adjusted[[i]]$Age > 94, 94, dat_adjusted[[i]]$Age)
dat_adjusted[[i]]$Age <- ifelse(dat_adjusted[[i]]$Age < 1, 1, dat_adjusted[[i]]$Age)
# Ensure dadid and momid are valid IDs
valid_ids <- dat_adjusted[[i]]$ID
dat_adjusted[[i]]$FatherID <- ifelse(dat_adjusted[[i]]$FatherID %in% valid_ids, dat_adjusted[[i]]$FatherID, NA)
dat_adjusted[[i]]$MotherID <- ifelse(dat_adjusted[[i]]$MotherID %in% valid_ids, dat_adjusted[[i]]$MotherID, NA)
# Check for any remaining invalid parent IDs and handle them
if (any(is.na(dat_adjusted[[i]]$father) | is.na(dat_adjusted[[i]]$mother))) {
warning("Some individuals have invalid or missing father or mother IDs.")
}
}
# Use the SEER baseline
baseline <- PPP::PanelPRODatabase$Penetrance["Colorectal","SEER","All_Races",,,"Net"]
# Adjust Format
baseline_df <- as.data.frame(t(baseline))
colnames(baseline_df) <- c("Female", "Male")
baseline_df$Age <- as.numeric(rownames(baseline_df))
baseline_df <- baseline_df[, c("Female", "Male")]
# Set the prior
# Exploring different priors
prior_params <- list(
asymptote = list(g1 = 1, g2 = 1),
threshold = list(min = 5, max = 30),
median = list(m1 = 2, m2 = 2),
first_quartile = list(q1 = 6, q2 = 3)
)
# select just 200 families
dat_sampled <- sample(dat_adjusted,200)
#Run Estimation procedure with default prior setting
#Main Estimation for Female
system.time(out_liftup_Colorectal_v4 <- penetrance(
pedigree  = dat_sampled, twins = NULL, n_chains = 1, n_iter_per_chain = 2000,
baseline_data = baseline_data_default,
af  = PPP::PanelPRODatabase$AlleleFrequency[paste0("TP53", "_anyPV"), "nonAJ"],
prior_params = prior_params, burn_in = 0.1, median_max = TRUE,
age_imputation = TRUE, remove_proband = FALSE, sex_specific = TRUE
))
# Use the SEER baseline
baseline <- PPP::PanelPRODatabase$Penetrance["Colorectal","SEER","All_Races",,,"Net"]
# Adjust Format
baseline_df <- as.data.frame(t(baseline))
colnames(baseline_df) <- c("Female", "Male")
baseline_df$Age <- as.numeric(rownames(baseline_df))
baseline_df <- baseline_df[, c("Female", "Male")]
# Set the prior
# Exploring different priors
prior_params <- list(
asymptote = list(g1 = 1, g2 = 1),
threshold = list(min = 5, max = 30),
median = list(m1 = 2, m2 = 2),
first_quartile = list(q1 = 6, q2 = 3)
)
# select just 200 families
dat_sampled <- sample(dat_adjusted, 200)
#Run Estimation procedure with default prior setting
#Main Estimation for Female
system.time(out_liftup_Colorectal_v4 <- penetrance(
pedigree  = dat_sampled, twins = NULL, n_chains = 1, n_iter_per_chain = 2000,
baseline_data = baseline_data_default,
af  = PPP::PanelPRODatabase$AlleleFrequency[paste0("TP53", "_anyPV"), "nonAJ"],
prior_params = prior_params, burn_in = 0.1, median_max = TRUE,
age_imputation = TRUE, remove_proband = FALSE, sex_specific = TRUE
))
# Use the SEER baseline
baseline <- PPP::PanelPRODatabase$Penetrance["Colorectal","SEER","All_Races",,,"Net"]
# Adjust Format
baseline_df <- as.data.frame(t(baseline))
colnames(baseline_df) <- c("Female", "Male")
baseline_df$Age <- as.numeric(rownames(baseline_df))
baseline_df <- baseline_df[, c("Female", "Male")]
# Set the prior
# Exploring different priors
prior_params <- list(
asymptote = list(g1 = 1, g2 = 1),
threshold = list(min = 5, max = 30),
median = list(m1 = 2, m2 = 2),
first_quartile = list(q1 = 6, q2 = 3)
)
# select just 200 families
dat_sampled <- sample(dat_adjusted, 200)
#Run Estimation procedure with default prior setting
#Main Estimation for Female
system.time(out_liftup_Colorectal_v4 <- penetrance(
pedigree  = dat_sampled, twins = NULL, n_chains = 1, n_iter_per_chain = 2000,
baseline_data = baseline_data_default,
af  = PPP::PanelPRODatabase$AlleleFrequency[paste0("TP53", "_anyPV"), "nonAJ"],
prior_params = prior_params, burn_in = 0.1, median_max = TRUE,
age_imputation = TRUE, remove_proband = FALSE, sex_specific = TRUE
))
save(out_liftup_Colorectal_v4, file = "out_liftup_Colorectal_v4.RData")
out_liftup_Colorectal_v4$combined_chains
out_liftup_Colorectal_v4$combined_chains$loglikelihood_current_results
library(penetrance)
library(PPP)
library(ggplot2)
library(ggridges)
library(ggplot2)
library(dplyr)
library(survival)
library(gridExtra)
library(GGally)
source("~/Documents/Master Statistics/Master Thesis/Code/Submission/PenEstim_vFF/R/outputHelpers.R")
source("~/Documents/Master Statistics/Master Thesis/Code/Submission/Additional Scripts/describeFamilies.R")
set.seed(27)
# Load data
dat_original <- read.csv("/Users/nicolaskubista/Partners HealthCare Dropbox/BayesMendel/Projects/Active/LiFTUP/Data/combined.csv")
# Assuming df is your dataframe and variable_name is your column name
value_counts <- table(dat_original$Gender)
print(value_counts)
family_list <- list()
unique_families <- unique(dat_original$Pedigree.name)
for (family_id in unique_families) {
family_data <- dat_original[dat_original$Pedigree.name == family_id, ]
family_list[[length(family_list) + 1]] <- family_data
}
dat <- family_list
#summary(dat_original)
# Function to convert columns to the required format
convert_pedigree_format <- function(dat) {
# Loop through each pedigree in the list
for (i in seq_along(dat)) {
# Rename columns according to the required format
colnames(dat[[i]])[colnames(dat[[i]]) == "Pedigree.name"] <- "PedigreeID"
colnames(dat[[i]])[colnames(dat[[i]]) == "UPN"] <- "ID"
colnames(dat[[i]])[colnames(dat[[i]]) == "Gender"] <- "Sex"
colnames(dat[[i]])[colnames(dat[[i]]) == "Mother.ID"] <- "MotherID"
colnames(dat[[i]])[colnames(dat[[i]]) == "Father.ID"] <- "FatherID"
colnames(dat[[i]])[colnames(dat[[i]]) == "proband_flag_x"] <- "isProband"
colnames(dat[[i]])[colnames(dat[[i]]) == "Age"] <- "CurAge"
colnames(dat[[i]])[colnames(dat[[i]]) == "Colorectal"] <- "isAff"
colnames(dat[[i]])[colnames(dat[[i]]) == "Colorectal_age_dx"] <- "Age"
colnames(dat[[i]])[colnames(dat[[i]]) == "GT.Pos"] <- "geno"
# Calculate CurAge only if it is currently NA
dat[[i]]$CurAge <- ifelse(is.na(dat[[i]]$CurAge),
dat[[i]]$Year_Last_FolUp - dat[[i]]$Year_Birth,
dat[[i]]$CurAge)
}
# Return the modified data
return(dat)
}
# Example usage with your list of pedigrees
dat_adjusted <- convert_pedigree_format(dat)
# Iterate through each data frame in the list dat
for (i in seq_along(dat_adjusted)) {
# Convert "Sex" to numeric where "M" is 1 and "F" is 0
dat_adjusted[[i]]$Sex <- ifelse(dat_adjusted[[i]]$Sex == "M", 1, ifelse(dat_adjusted[[i]]$Sex == "F", 0, NA))
# Remove rows where Sex is NA
dat_adjusted[[i]] <- dat_adjusted[[i]][!is.na(dat_adjusted[[i]]$Sex), ]
# Convert "isProband" to numeric where "proband" is 1, and all other values are 0
dat_adjusted[[i]]$isProband <- ifelse(dat_adjusted[[i]]$isProband == "proband", 1, 0)
# Convert "isAff" to numeric where "True" is 1, and anything else (including NA) is 0
dat_adjusted[[i]]$isAff[is.na(dat_adjusted[[i]]$isAff)] <- 0
dat_adjusted[[i]]$isAff <- ifelse(dat_adjusted[[i]]$isAff == "True", 1, 0)
#Adjust "geno" column: "True" = 1, "False" = 0, NA if unknown
dat_adjusted[[i]]$geno <- ifelse(dat_adjusted[[i]]$geno == "True", 1,
ifelse(dat_adjusted[[i]]$geno == "False", 0, NA))
# Ensure "CurAge" and "Age" are within allowed range (1 to 94)
dat_adjusted[[i]]$CurAge <- ifelse(dat_adjusted[[i]]$CurAge > 94, 94, dat_adjusted[[i]]$CurAge)
dat_adjusted[[i]]$CurAge <- ifelse(dat_adjusted[[i]]$CurAge < 1, 1, dat_adjusted[[i]]$CurAge)
dat_adjusted[[i]]$Age <- ifelse(dat_adjusted[[i]]$Age > 94, 94, dat_adjusted[[i]]$Age)
dat_adjusted[[i]]$Age <- ifelse(dat_adjusted[[i]]$Age < 1, 1, dat_adjusted[[i]]$Age)
# Ensure dadid and momid are valid IDs
valid_ids <- dat_adjusted[[i]]$ID
dat_adjusted[[i]]$FatherID <- ifelse(dat_adjusted[[i]]$FatherID %in% valid_ids, dat_adjusted[[i]]$FatherID, NA)
dat_adjusted[[i]]$MotherID <- ifelse(dat_adjusted[[i]]$MotherID %in% valid_ids, dat_adjusted[[i]]$MotherID, NA)
# Check for any remaining invalid parent IDs and handle them
if (any(is.na(dat_adjusted[[i]]$father) | is.na(dat_adjusted[[i]]$mother))) {
warning("Some individuals have invalid or missing father or mother IDs.")
}
}
# Initialize a counter for NA values
na_count <- 0
# Loop through each data frame in the list
for(i in 1:length(dat_adjusted)) {
# Add the count of NA values in the isAff column to na_count
na_count <- na_count + sum(is.na(dat_adjusted[[i]]$CurAge))
}
describeFamilies(dat_adjusted)
load("/Users/nicolaskubista/Partners HealthCare Dropbox/BayesMendel/Projects/Active/LiFTUP/Code/out_liftup_Colorectal_v4.RData")
summary(out_liftup_Colorectal_v4$combined_chains)
summary(out_liftup_Colorectal_v4$combined_chains$loglikelihood_current_results)
