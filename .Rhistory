colnames(dat[[i]])[colnames(dat[[i]]) == "UPN"] <- "ID"
colnames(dat[[i]])[colnames(dat[[i]]) == "Gender"] <- "Sex"
colnames(dat[[i]])[colnames(dat[[i]]) == "Mother.ID"] <- "MotherID"
colnames(dat[[i]])[colnames(dat[[i]]) == "Father.ID"] <- "FatherID"
colnames(dat[[i]])[colnames(dat[[i]]) == "proband_flag_x"] <- "isProband"
colnames(dat[[i]])[colnames(dat[[i]]) == "Age"] <- "CurAge"
colnames(dat[[i]])[colnames(dat[[i]]) == "Colorectal"] <- "isAff"
colnames(dat[[i]])[colnames(dat[[i]]) == "Colorectal_age_dx"] <- "Age"
colnames(dat[[i]])[colnames(dat[[i]]) == "GT.Pos"] <- "geno"
# Calculate CurAge only if it is currently NA
dat[[i]]$CurAge <- ifelse(is.na(dat[[i]]$CurAge),
dat[[i]]$Year_Last_FolUp - dat[[i]]$Year_Birth,
dat[[i]]$CurAge)
# Step 1: Extract all columns that end with "_age_dx" (diagnosis age)
diagnosis_age_columns <- grep("_age_dx$", names(dat[[i]]), value = TRUE)
# Step 2: Calculate the earliest diagnosis age across all cancer types
dat[[i]]$min_diagnosis_age <- apply(dat[[i]][diagnosis_age_columns], 1, function(x) {
# Check if all values are NA in the diagnosis columns
if (all(is.na(x))) {
return(NA)  # Return NA if no diagnosis age is available
} else {
return(min(x, na.rm = TRUE))  # Return the minimum diagnosis age
}
})
# Step 3: Update CurAge to censor at the first diagnosis or follow-up
dat[[i]]$CurAge <- ifelse(!is.na(dat[[i]]$min_diagnosis_age),
pmin(dat[[i]]$CurAge, dat[[i]]$min_diagnosis_age, na.rm = TRUE),
dat[[i]]$CurAge)
}
# Return the modified data
return(dat)
}
# Example usage with your list of pedigrees
dat_adjusted <- convert_pedigree_censor(dat)
dat_adjusted[[1]]
# Function to convert columns to the required format
convert_pedigree_censor <- function(dat) {
browser()
# Loop through each pedigree in the list
for (i in seq_along(dat)) {
# Rename columns according to the required format
colnames(dat[[i]])[colnames(dat[[i]]) == "Pedigree.name"] <- "PedigreeID"
colnames(dat[[i]])[colnames(dat[[i]]) == "UPN"] <- "ID"
colnames(dat[[i]])[colnames(dat[[i]]) == "Gender"] <- "Sex"
colnames(dat[[i]])[colnames(dat[[i]]) == "Mother.ID"] <- "MotherID"
colnames(dat[[i]])[colnames(dat[[i]]) == "Father.ID"] <- "FatherID"
colnames(dat[[i]])[colnames(dat[[i]]) == "proband_flag_x"] <- "isProband"
colnames(dat[[i]])[colnames(dat[[i]]) == "Age"] <- "CurAge"
colnames(dat[[i]])[colnames(dat[[i]]) == "Colorectal"] <- "isAff"
colnames(dat[[i]])[colnames(dat[[i]]) == "Colorectal_age_dx"] <- "Age"
colnames(dat[[i]])[colnames(dat[[i]]) == "GT.Pos"] <- "geno"
# Calculate CurAge only if it is currently NA
dat[[i]]$CurAge <- ifelse(is.na(dat[[i]]$CurAge),
dat[[i]]$Year_Last_FolUp - dat[[i]]$Year_Birth,
dat[[i]]$CurAge)
# Step 1: Extract all columns that end with "_age_dx" (diagnosis age)
diagnosis_age_columns <- grep("_age_dx$", names(dat[[i]]), value = TRUE)
# Step 2: Calculate the earliest diagnosis age across all cancer types
dat[[i]]$min_diagnosis_age <- apply(dat[[i]][diagnosis_age_columns], 1, function(x) {
# Check if all values are NA in the diagnosis columns
if (all(is.na(x))) {
return(NA)  # Return NA if no diagnosis age is available
} else {
return(min(x, na.rm = TRUE))  # Return the minimum diagnosis age
}
})
# Step 3: Update CurAge to censor at the first diagnosis or follow-up
dat[[i]]$CurAge <- ifelse(!is.na(dat[[i]]$min_diagnosis_age),
pmin(dat[[i]]$CurAge, dat[[i]]$min_diagnosis_age, na.rm = TRUE),
dat[[i]]$CurAge)
}
# Return the modified data
return(dat)
}
# Example usage with your list of pedigrees
dat_adjusted <- convert_pedigree_censor(dat)
# Iterate through each data frame in the list dat
for (i in seq_along(dat_adjusted)) {
# Convert "Sex" to numeric where "M" is 1 and "F" is 0
dat_adjusted[[i]]$Sex <- ifelse(dat_adjusted[[i]]$Sex == "M", 1, ifelse(dat_adjusted[[i]]$Sex == "F", 0, NA))
# Remove rows where Sex is NA
dat_adjusted[[i]] <- dat_adjusted[[i]][!is.na(dat_adjusted[[i]]$Sex), ]
# Convert "isProband" to numeric where "proband" is 1, and all other values are 0
dat_adjusted[[i]]$isProband <- ifelse(dat_adjusted[[i]]$isProband == "proband", 1, 0)
# Convert "isAff" to numeric where "True" is 1, and anything else (including NA) is 0
dat_adjusted[[i]]$isAff[is.na(dat_adjusted[[i]]$isAff)] <- 0
dat_adjusted[[i]]$isAff <- ifelse(dat_adjusted[[i]]$isAff == "True", 1, 0)
#Adjust "geno" column: "True" = 1, "False" = 0, NA if unknown
dat_adjusted[[i]]$geno <- ifelse(dat_adjusted[[i]]$geno == "True", 1,
ifelse(dat_adjusted[[i]]$geno == "False", 0, NA))
# Ensure "CurAge" and "Age" are within allowed range (1 to 94)
dat_adjusted[[i]]$CurAge <- ifelse(dat_adjusted[[i]]$CurAge > 94, 94, dat_adjusted[[i]]$CurAge)
dat_adjusted[[i]]$CurAge <- ifelse(dat_adjusted[[i]]$CurAge < 1, 1, dat_adjusted[[i]]$CurAge)
dat_adjusted[[i]]$Age <- ifelse(dat_adjusted[[i]]$Age > 94, 94, dat_adjusted[[i]]$Age)
dat_adjusted[[i]]$Age <- ifelse(dat_adjusted[[i]]$Age < 1, 1, dat_adjusted[[i]]$Age)
# Ensure dadid and momid are valid IDs
valid_ids <- dat_adjusted[[i]]$ID
dat_adjusted[[i]]$FatherID <- ifelse(dat_adjusted[[i]]$FatherID %in% valid_ids, dat_adjusted[[i]]$FatherID, NA)
dat_adjusted[[i]]$MotherID <- ifelse(dat_adjusted[[i]]$MotherID %in% valid_ids, dat_adjusted[[i]]$MotherID, NA)
# Check for any remaining invalid parent IDs and handle them
if (any(is.na(dat_adjusted[[i]]$father) | is.na(dat_adjusted[[i]]$mother))) {
warning("Some individuals have invalid or missing father or mother IDs.")
}
}
# Initialize a counter for NA values
na_count <- 0
# Loop through each data frame in the list
for(i in 1:length(dat_adjusted)) {
# Add the count of NA values in the isAff column to na_count
na_count <- na_count + sum(is.na(dat_adjusted[[i]]$CurAge))
}
# Usage with or without removing probands
plot_penetrance_curves(dat_adjusted, remove_proband = TRUE)
plot_penetrance_curves <- function(fams, remove_proband = FALSE) {
# Aggregate the data
allcarriers <- do.call(rbind, fams)
# Set Age to CurAge if not affected (isAff == 0)
allcarriers$Age <- ifelse(allcarriers$isAff == 0, allcarriers$CurAge, allcarriers$Age)
# Remove rows with NA in Age or isAff
allcarriers <- allcarriers[!is.na(allcarriers$Age) & !is.na(allcarriers$isAff), ]
# Optionally remove probands (isProband == 1)
if (remove_proband) {
allcarriers <- allcarriers[allcarriers$isProband == 0, ]
}
# Convert isAff to numeric (0 or 1)
allcarriers$isAff <- as.numeric(allcarriers$isAff)
# Separate data by gender (assuming Sex: 0 = female, 1 = male)
female_data <- allcarriers[allcarriers$Sex == 0, ]
male_data <- allcarriers[allcarriers$Sex == 1, ]
# Set up the plotting area for both genders
plot(0, 0, type = "n", xlim = c(0, 100), ylim = c(0, 0.2), xlab = "Age",
ylab = "Penetrance", main = "Kaplan-Meier Curves for CRC")
# Initialize colors and line types
colors <- c("red", "blue")
line_types <- c(1, 2)
# Kaplan-Meier for females
surv_obj_female <- Surv(time = female_data$Age, event = female_data$isAff)
km_fit_female <- survfit(surv_obj_female ~ 1, data = female_data)
penetrance_female <- 1 - km_fit_female$surv
# Plot the aggregated penetrance curves for females
lines(km_fit_female$time, penetrance_female, type = "l", col = colors[1], lty = line_types[1])
# Kaplan-Meier for males
surv_obj_male <- Surv(time = male_data$Age, event = male_data$isAff)
km_fit_male <- survfit(surv_obj_male ~ 1, data = male_data)
penetrance_male <- 1 - km_fit_male$surv
# Plot the aggregated penetrance curves for males
lines(km_fit_male$time, penetrance_male, type = "l", col = colors[2], lty = line_types[2])
# Extract affected and non-affected counts from the survfit objects
num_affected_female <- sum(km_fit_female$n.event)
num_non_affected_female <- km_fit_female$n[1] - num_affected_female
num_affected_male <- sum(km_fit_male$n.event)
num_non_affected_male <- km_fit_male$n[1] - num_affected_male
# Print the counts
message(paste("Females - Affected:", num_affected_female, ", Non-Affected:", num_non_affected_female))
message(paste("Males - Affected:", num_affected_male, ", Non-Affected:", num_non_affected_male))
# Add legend to distinguish between male and female curves
legend("topleft", legend = c("Females", "Males"), col = colors, lty = line_types, bty = "n")
}
# Usage with or without removing probands
plot_penetrance_curves(dat_adjusted, remove_proband = TRUE)
library(penetrance)
library(PPP)
library(ggplot2)
library(ggridges)
library(ggplot2)
library(dplyr)
library(gridExtra)
library(GGally)
source("~/Documents/Master Statistics/Master Thesis/Code/Submission/PenEstim_vFF/R/outputHelpers.R")
set.seed(27)
library(penetrance)
library(PPP)
library(ggplot2)
library(ggridges)
library(ggplot2)
library(dplyr)
library(survival)
library(gridExtra)
library(GGally)
source("~/Documents/Master Statistics/Master Thesis/Code/Submission/PenEstim_vFF/R/outputHelpers.R")
set.seed(27)
plot_penetrance_curves <- function(fams, remove_proband = FALSE) {
# Aggregate the data
allcarriers <- do.call(rbind, fams)
# Set Age to CurAge if not affected (isAff == 0)
allcarriers$Age <- ifelse(allcarriers$isAff == 0, allcarriers$CurAge, allcarriers$Age)
# Remove rows with NA in Age or isAff
allcarriers <- allcarriers[!is.na(allcarriers$Age) & !is.na(allcarriers$isAff), ]
# Optionally remove probands (isProband == 1)
if (remove_proband) {
allcarriers <- allcarriers[allcarriers$isProband == 0, ]
}
# Convert isAff to numeric (0 or 1)
allcarriers$isAff <- as.numeric(allcarriers$isAff)
# Separate data by gender (assuming Sex: 0 = female, 1 = male)
female_data <- allcarriers[allcarriers$Sex == 0, ]
male_data <- allcarriers[allcarriers$Sex == 1, ]
# Set up the plotting area for both genders
plot(0, 0, type = "n", xlim = c(0, 100), ylim = c(0, 0.2), xlab = "Age",
ylab = "Penetrance", main = "Kaplan-Meier Curves for CRC")
# Initialize colors and line types
colors <- c("red", "blue")
line_types <- c(1, 2)
# Kaplan-Meier for females
surv_obj_female <- Surv(time = female_data$Age, event = female_data$isAff)
km_fit_female <- survfit(surv_obj_female ~ 1, data = female_data)
penetrance_female <- 1 - km_fit_female$surv
# Plot the aggregated penetrance curves for females
lines(km_fit_female$time, penetrance_female, type = "l", col = colors[1], lty = line_types[1])
# Kaplan-Meier for males
surv_obj_male <- Surv(time = male_data$Age, event = male_data$isAff)
km_fit_male <- survfit(surv_obj_male ~ 1, data = male_data)
penetrance_male <- 1 - km_fit_male$surv
# Plot the aggregated penetrance curves for males
lines(km_fit_male$time, penetrance_male, type = "l", col = colors[2], lty = line_types[2])
# Extract affected and non-affected counts from the survfit objects
num_affected_female <- sum(km_fit_female$n.event)
num_non_affected_female <- km_fit_female$n[1] - num_affected_female
num_affected_male <- sum(km_fit_male$n.event)
num_non_affected_male <- km_fit_male$n[1] - num_affected_male
# Print the counts
message(paste("Females - Affected:", num_affected_female, ", Non-Affected:", num_non_affected_female))
message(paste("Males - Affected:", num_affected_male, ", Non-Affected:", num_non_affected_male))
# Add legend to distinguish between male and female curves
legend("topleft", legend = c("Females", "Males"), col = colors, lty = line_types, bty = "n")
}
# Usage with or without removing probands
plot_penetrance_curves(dat_adjusted, remove_proband = TRUE)
plot_penetrance_curves(dat_adjusted, remove_proband = FALSE)
# Function to convert columns to the required format
convert_pedigree_censor <- function(dat) {
browser()
# Loop through each pedigree in the list
for (i in seq_along(dat)) {
# Rename columns according to the required format
colnames(dat[[i]])[colnames(dat[[i]]) == "Pedigree.name"] <- "PedigreeID"
colnames(dat[[i]])[colnames(dat[[i]]) == "UPN"] <- "ID"
colnames(dat[[i]])[colnames(dat[[i]]) == "Gender"] <- "Sex"
colnames(dat[[i]])[colnames(dat[[i]]) == "Mother.ID"] <- "MotherID"
colnames(dat[[i]])[colnames(dat[[i]]) == "Father.ID"] <- "FatherID"
colnames(dat[[i]])[colnames(dat[[i]]) == "proband_flag_x"] <- "isProband"
colnames(dat[[i]])[colnames(dat[[i]]) == "Age"] <- "CurAge"
colnames(dat[[i]])[colnames(dat[[i]]) == "Colorectal"] <- "isAff"
colnames(dat[[i]])[colnames(dat[[i]]) == "Colorectal_age_dx"] <- "Age"
colnames(dat[[i]])[colnames(dat[[i]]) == "GT.Pos"] <- "geno"
# Calculate CurAge only if it is currently NA
dat[[i]]$CurAge <- ifelse(is.na(dat[[i]]$CurAge),
dat[[i]]$Year_Last_FolUp - dat[[i]]$Year_Birth,
dat[[i]]$CurAge)
# Step 1: Extract all columns that end with "_age_dx" (diagnosis age)
diagnosis_age_columns <- grep("_age_dx$", names(dat[[i]]), value = TRUE)
# Step 2: Calculate the earliest diagnosis age across all cancer types
dat[[i]]$min_diagnosis_age <- apply(dat[[i]][diagnosis_age_columns], 1, function(x) {
# Check if all values are NA in the diagnosis columns
if (all(is.na(x))) {
return(NA)  # Return NA if no diagnosis age is available
} else {
return(min(x, na.rm = TRUE))  # Return the minimum diagnosis age
}
})
# Step 3: Update CurAge to censor at the first diagnosis or follow-up
dat[[i]]$CurAge <- ifelse(!is.na(dat[[i]]$min_diagnosis_age),
pmin(dat[[i]]$CurAge, dat[[i]]$min_diagnosis_age, na.rm = TRUE),
dat[[i]]$CurAge)
}
# Return the modified data
return(dat)
}
# Example usage with your list of pedigrees
dat_adjusted <- convert_pedigree_censor(dat)
# Iterate through each data frame in the list dat
for (i in seq_along(dat_adjusted)) {
# Convert "Sex" to numeric where "M" is 1 and "F" is 0
dat_adjusted[[i]]$Sex <- ifelse(dat_adjusted[[i]]$Sex == "M", 1, ifelse(dat_adjusted[[i]]$Sex == "F", 0, NA))
# Remove rows where Sex is NA
dat_adjusted[[i]] <- dat_adjusted[[i]][!is.na(dat_adjusted[[i]]$Sex), ]
# Convert "isProband" to numeric where "proband" is 1, and all other values are 0
dat_adjusted[[i]]$isProband <- ifelse(dat_adjusted[[i]]$isProband == "proband", 1, 0)
# Convert "isAff" to numeric where "True" is 1, and anything else (including NA) is 0
dat_adjusted[[i]]$isAff[is.na(dat_adjusted[[i]]$isAff)] <- 0
dat_adjusted[[i]]$isAff <- ifelse(dat_adjusted[[i]]$isAff == "True", 1, 0)
#Adjust "geno" column: "True" = 1, "False" = 0, NA if unknown
dat_adjusted[[i]]$geno <- ifelse(dat_adjusted[[i]]$geno == "True", 1,
ifelse(dat_adjusted[[i]]$geno == "False", 0, NA))
# Ensure "CurAge" and "Age" are within allowed range (1 to 94)
dat_adjusted[[i]]$CurAge <- ifelse(dat_adjusted[[i]]$CurAge > 94, 94, dat_adjusted[[i]]$CurAge)
dat_adjusted[[i]]$CurAge <- ifelse(dat_adjusted[[i]]$CurAge < 1, 1, dat_adjusted[[i]]$CurAge)
dat_adjusted[[i]]$Age <- ifelse(dat_adjusted[[i]]$Age > 94, 94, dat_adjusted[[i]]$Age)
dat_adjusted[[i]]$Age <- ifelse(dat_adjusted[[i]]$Age < 1, 1, dat_adjusted[[i]]$Age)
# Ensure dadid and momid are valid IDs
valid_ids <- dat_adjusted[[i]]$ID
dat_adjusted[[i]]$FatherID <- ifelse(dat_adjusted[[i]]$FatherID %in% valid_ids, dat_adjusted[[i]]$FatherID, NA)
dat_adjusted[[i]]$MotherID <- ifelse(dat_adjusted[[i]]$MotherID %in% valid_ids, dat_adjusted[[i]]$MotherID, NA)
# Check for any remaining invalid parent IDs and handle them
if (any(is.na(dat_adjusted[[i]]$father) | is.na(dat_adjusted[[i]]$mother))) {
warning("Some individuals have invalid or missing father or mother IDs.")
}
}
# Initialize a counter for NA values
na_count <- 0
# Loop through each data frame in the list
for(i in 1:length(dat_adjusted)) {
# Add the count of NA values in the isAff column to na_count
na_count <- na_count + sum(is.na(dat_adjusted[[i]]$CurAge))
}
# Usage with or without removing probands
plot_penetrance_curves(dat_adjusted, remove_proband = TRUE)
plot_penetrance_curves(dat_adjusted, remove_proband = FALSE)
plot_penetrance_curves <- function(fams, remove_proband = FALSE) {
# Aggregate the data
allcarriers <- do.call(rbind, fams)
# Set Age to CurAge if not affected (isAff == 0)
allcarriers$Age <- ifelse(allcarriers$isAff == 0, allcarriers$CurAge, allcarriers$Age)
# Remove rows with NA in Age or isAff
allcarriers <- allcarriers[!is.na(allcarriers$Age) & !is.na(allcarriers$isAff), ]
# Optionally remove probands (isProband == 1)
if (remove_proband) {
allcarriers <- allcarriers[allcarriers$isProband == 0, ]
}
# Convert isAff to numeric (0 or 1)
allcarriers$isAff <- as.numeric(allcarriers$isAff)
# Separate data by gender (assuming Sex: 0 = female, 1 = male)
female_data <- allcarriers[allcarriers$Sex == 0, ]
male_data <- allcarriers[allcarriers$Sex == 1, ]
# Set up the plotting area for both genders
plot(0, 0, type = "n", xlim = c(0, 100), ylim = c(0, 0.2), xlab = "Age",
ylab = "Penetrance", main = "Kaplan-Meier Curves for CRC")
# Initialize colors and line types
colors <- c("red", "blue")
line_types <- c(1, 2)
# Kaplan-Meier for females
surv_obj_female <- Surv(time = female_data$Age, event = female_data$isAff)
km_fit_female <- survfit(surv_obj_female ~ 1, data = female_data)
penetrance_female <- 1 - km_fit_female$surv
# Plot the aggregated penetrance curves for females
lines(km_fit_female$time, penetrance_female, type = "l", col = colors[1], lty = line_types[1])
# Kaplan-Meier for males
surv_obj_male <- Surv(time = male_data$Age, event = male_data$isAff)
km_fit_male <- survfit(surv_obj_male ~ 1, data = male_data)
penetrance_male <- 1 - km_fit_male$surv
# Plot the aggregated penetrance curves for males
lines(km_fit_male$time, penetrance_male, type = "l", col = colors[2], lty = line_types[1])
# Extract affected and non-affected counts from the survfit objects
num_affected_female <- sum(km_fit_female$n.event)
num_non_affected_female <- km_fit_female$n[1] - num_affected_female
num_affected_male <- sum(km_fit_male$n.event)
num_non_affected_male <- km_fit_male$n[1] - num_affected_male
# Print the counts
message(paste("Females - Affected:", num_affected_female, ", Non-Affected:", num_non_affected_female))
message(paste("Males - Affected:", num_affected_male, ", Non-Affected:", num_non_affected_male))
# Add legend to distinguish between male and female curves
legend("topleft", legend = c("Females", "Males"), col = colors, lty = line_types, bty = "n")
}
# Usage with or without removing probands
plot_penetrance_curves(dat_adjusted, remove_proband = TRUE)
plot_penetrance_curves(dat_adjusted, remove_proband = FALSE)
# Load data
# Load data
dat_original <- read.csv("/Users/nicolaskubista/Partners HealthCare Dropbox/BayesMendel/Projects/Active/LiFTUP/Data/combined.csv")
# Assuming df is your dataframe and variable_name is your column name
value_counts <- table(dat_original$Gender)
print(value_counts)
family_list <- list()
unique_families <- unique(dat_original$Pedigree.name)
for (family_id in unique_families) {
family_data <- dat_original[dat_original$Pedigree.name == family_id, ]
family_list[[length(family_list) + 1]] <- family_data
}
dat <- family_list
summary(dat_original)
d <- do.call(rbind,dat)
d$Age
summar(d$Age)
summary(d$Age)
load("/Users/nicolaskubista/Partners HealthCare Dropbox/BayesMendel/Projects/Active/NK_PenetranceEstimation/5_Data/PALB2_carrier_families.RData")
knitr::opts_chunk$set(echo = TRUE)
library(plyr) #need to load plyr before dplyr
library(truncnorm)
library(PanelPRO)
library(tidyverse)
library(stringr)
library(PedUtils)
library(survival)
library(dplyr)
library(MASS)
library(profvis)
describeFamilies <- function(fams){
affectedFamilies = 0
affectedProbands = 0
famSizes = c()
BRCA1Families = 0
BRCA1Probands = 0
curAges = 0
BCAges = 0
pbBCAges=0
pbCurAges=0
pbBCAgesfemale = 0
affectedfemaleProbands = 0
BRCA1femaleProbands = 0
BCAgesfemale = 0
total_individuals = 0
BRCA1_individuals = 0
#affectedFamiliesList = list()
#j = 1
for(i in 1:length(fams)){
f = fams[[i]]
sizeOfFamily = nrow(f)
total_individuals = total_individuals + sizeOfFamily
famSizes = c(famSizes, sizeOfFamily)
curAges = c(curAges, f$CurAge)
f = f %>% filter(isAffBC==1) %>% filter(isProband==0)
BCAges <- c(BCAges, f$AgeBC)
ff = fams[[i]] %>% filter(BRCA1==1) %>% filter(isAffBC==1)
BRCA1_individuals = BRCA1_individuals + nrow(ff)
BCAgesfemale <- c(BCAgesfemale, ff$AgeBC)
if(nrow(f)>0){
affectedFamilies = affectedFamilies + 1
}
BRCA1fams = fams[[i]] %>% filter(isProband==0) %>% filter(BRCA1==1)
if(nrow(BRCA1fams) > 0){
BRCA1Families = BRCA1Families + 1
}
pb <- fams[[i]] %>% filter(isProband == 1)
pbfemale <- fams[[i]] %>% filter(isProband == 1) %>% filter(Sex == 0)
# Check if pbfemale has any rows before accessing its columns
if (nrow(pbfemale) > 0) {
pbBCAgesfemale <- c(pbBCAgesfemale, pbfemale$AgeBC)
if (any(pbfemale$isAffBC == 1)){
affectedfemaleProbands <- affectedfemaleProbands + 1
}
if (!is.na(pbfemale$BRCA1)){
if (any(pbfemale$BRCA1 == 1)){
BRCA1femaleProbands <- BRCA1femaleProbands + 1
}
}
}
pbBCAges <- c(pbBCAges, pb$AgeBC)
pbCurAges <- c(pbCurAges, pb$CurAge)
if (any(pb$isAffBC == 1)){
affectedProbands <- affectedProbands + 1
}
if (!is.na(pb$BRCA1)){
if (any(pb$BRCA1 == 1)){
BRCA1Probands <- BRCA1Probands + 1
}
}
}
# careful with the description
# do the stratified descriptives
# check the weibull to look like
print(paste0("Number of families: ", length(fams)))
print(paste0("Total Individuals: ", total_individuals))
print(paste0("Average family size: ", mean(famSizes)))
print("Summary of family sizes")
print(summary(famSizes))
print("Summary of Current Age for all family members")
print(summary(curAges))
print("Summary of Current Age for probands")
print(summary(pbCurAges))
print(paste0("Number of families with affected (BC) individuals: ",
affectedFamilies))
print(paste0("Number of families with affected (BC) probands: ",
affectedProbands))
print(paste0("Number of families with affected (BC) female probands: ",
affectedfemaleProbands))
print(paste0("Number of families with relatives with PV (and not the proband)
: ", BRCA1Families))
print(paste0("Number of families with proband with PV: ", BRCA1Probands))
print(paste0("Number of families with female proband with PV: ",
BRCA1femaleProbands))
print(paste0("Number of individuals with PV: ", BRCA1_individuals))
print("Summary of BC Age of (female) probands")
print(summary(pbBCAgesfemale))
print("Summary of BC Age in affected (non-proband) individuals")
print(summary(BCAges))
print("Summary of BC Age in affected (non-proband) female individuals")
print(summary(BCAgesfemale))
}
describeFamilies(carrier_families_list)
PanelPRODatabase$Penetrance
# Load data
dat_original <- read.csv("/Users/nicolaskubista/Partners HealthCare Dropbox/BayesMendel/Projects/Active/LiFTUP/Data/combined.csv")
# Assuming df is your dataframe and variable_name is your column name
value_counts <- table(dat_original$Gender)
print(value_counts)
family_list <- list()
unique_families <- unique(dat_original$Pedigree.name)
for (family_id in unique_families) {
family_data <- dat_original[dat_original$Pedigree.name == family_id, ]
family_list[[length(family_list) + 1]] <- family_data
}
dat <- family_list
#summary(dat_original)
summary(dat_original)
rmarkdown::render("README.Rmd")
pkgdown::build_site()
pkgdown::clean_site()
pkgdown::build_site()
pkgdown::clean_site()
pkgdown::build_site()
library(penetrance)
pkgdown::build_site()
rmarkdown::render("README.Rmd")
rmarkdown::render("README.Rmd")
library(penetrance)
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
rmarkdown::render("README.Rmd")
pkgdown::build_site()
