race <- "All_Races"
sex <- "Female"
type <- "Net"
# Find the indices for the resp. attributes
dim_names <- attr(PanelPRODatabase$Penetrance, "dimnames")
gene_index <- which(dim_names$Gene == gene)
cancer_index <- which(dim_names$Cancer == cancer)
race_index <- which(dim_names$Race == race)
sex_index <- which(dim_names$Sex == sex)
type_index <- which(dim_names$PenetType == type)
# Overwrite the penetetrane for all races, geneders and races
PanelPRODatabase$Penetrance[cancer_index, gene_index, race_index, sex_index , ,]<- penetrance.mod.f
# Given mean and variance
alpha <- 1.5 # Replace with the value you have
beta  <- 40 # Replace with the value you have
gamma <- 0.6
delta <- 25
# Now use alpha and beta in your simulation
penetrance.mod.m <- dweibull(age - delta, alpha, beta) * gamma
# For now focus on just one vector of penetrance estimates
gene <- "MLH1_hetero_anyPV"
cancer <- "Colorectal"
race <- "All_Races"
sex <- "Male"
type <- "Net"
# Find the indices for the resp. attributes
dim_names <- attr(PanelPRODatabase$Penetrance, "dimnames")
gene_index <- which(dim_names$Gene == gene)
cancer_index <- which(dim_names$Cancer == cancer)
race_index <- which(dim_names$Race == race)
sex_index <- which(dim_names$Sex == sex)
type_index <- which(dim_names$PenetType == type)
# Overwrite the penetetrane for all races, geneders and races
PanelPRODatabase$Penetrance[cancer_index, gene_index, race_index, sex_index , ,]<- penetrance.mod.m
# Simulation
suppressMessages(suppressWarnings(capture.output(for(i in 1:numberFamilies){
# Cancers
cancers = "Colorectal"
# Genes
genes = "MLH1"
#family members
# Paternal aunts, paternal uncles
nSibsPatern =floor(rtruncnorm(n=2, mean=1, 3))
# Maternal aunts, maternal uncles
nSibsMatern = floor(rtruncnorm(n=2, mean=1, 3))
# Sisters and brothers
nSibs = floor(rtruncnorm(n=2, mean=1, 1))
# We make the assumption that the number of sons and daughters for the
# proband and all siblings, is the same. Nieces and nephews of the proband
# are not sampled separately1
nGrandchild = floor(rtruncnorm(n=2, mean=0, 1))
nChild = floor(rtruncnorm(n=2, mean=1, 1))
# Simulate family using `PedUtils` code
fam = sim.runSimFam(nSibsPatern, nSibsMatern, nSibs, nChild,
db_sim, genes, cancers,
includeGeno = TRUE, includeBiomarkers = FALSE,
censoring = TRUE)
famDF = as.data.frame(fam)
proband = famDF %>% filter(isProband==1)
probandIDS = c(probandIDS, proband$ID)
probandMLH1Status = c(probandMLH1Status, proband$MLH1)
probandAffectionStatus = c(probandAffectionStatus, proband$isAffCOL)
families_MLH1[[i]] = famDF
})))
save(families_MLH1, file = "families_MLH1.RData")
# Filter families with affected probands
carrierProbandfamilies_MLH1 <- Filter(function(fam)
any(fam$isProband == 1 & fam$MLH1 == 1), families_MLH1)
# hide genotype information for everyone but the proband
simFamiliesGeno <- function(fams) {
simFamilies <- list()
# Assuming you have the original list of families stored as `original_families`
# and a vector of proband IDs called `proband_ids`
for (i in 1:length(fams)) {
family <- fams[[i]]
proband <-  family %>% filter(isProband==1)
family$MLH1 <- ifelse(family$ID == proband$ID, family$MLH1, NA)
simFamilies[[i]] <- family
}
return(simFamilies)
}
simfamilies_MLH1 <- simFamiliesGeno(carrierProbandfamilies_MLH1)
# Select 130 families at random
selected_families <- sample(simfamilies_MLH1, 130)
save(selected_families, file = "selected_families.RData")
# Analysis
describeFamilies(selected_families, "Colorectal", "MLH1")
set.seed(123)
runif(1)  # This will always generate the same number
my_function <- function() {
runif(1)  # This will also generate a reproducible number
}
my_function <- function() {
runif(1)  # This will also generate a reproducible number
}
my_function()  # This will always generate the same number as long as set.seed(123) is set outside
set.seed(123)
runif(1)  # This will always generate the same number
my_function <- function() {
runif(1)  # This will also generate a reproducible number
}
my_function()  # This will always generate the same number as long as set.seed(123) is set outside
my_function <- function() {
runif(1)  # This will also generate a reproducible number
}
my_function()  # This will always generate the same number as long as set.seed(123) is set outside
my_function <- function() {
set.seed(456)
runif(1)  # This will generate a number based on the new seed set within the function
}
my_function()  # This will always generate the same number based on set.seed(456)
runif(1)  # This will generate a different number than the first call to runif(1)
set.seed(123)
my_function <- function() {
set.seed(runif(1,1,1000))
runif(1)  # This will generate a number based on the new seed set within the function
}
my_function()  # This will always generate the same number based on set.seed(456)
runif(1)  # This will generate a different number than the first call to runif(1)
my_function <- function() {
set.seed(runif(1,1,1000))
runif(1)  # This will generate a number based on the new seed set within the function
}
my_function()  # This will always generate the same number based on set.seed(456)
set.seed(123)
my_function <- function() {
set.seed(runif(1,1,1000))
runif(1)  # This will generate a number based on the new seed set within the function
}
my_function()  # This will always generate the same number based on set.seed(456)
load("/Users/nicolaskubista/Partners HealthCare Dropbox/BayesMendel/Projects/Active/NK_PenetranceEstimation/3_Code/out_sim_COL_MLH1_sim130.Rdata")
# Function to calculate Weibull parameters
calculate_weibull_parameters <- function(given_median, given_first_quartile, delta) {
# Calculate alpha
alpha <- log(-log(0.5) / -log(0.75)) / log((given_median - delta) / (given_first_quartile - delta))
# Calculate beta using the median (M)
beta <- (given_median - delta) / (-log(0.5))^(1 / alpha)
return(list(alpha = alpha, beta = beta))
}
# Function to calculate Weibull cumulative density
weibull_cumulative <- function(x, alpha, beta, threshold, asymptote) {
pweibull(x - threshold, shape = alpha, scale = beta) * asymptote
}
# Function to plot the penetrance and compare with Panelpro Database
plot_penetrance_comparison <- function(data, db_sim, prob, max_age, cancer, gene, sex, race, type) {
if (prob <= 0 || prob >= 1) {
stop("prob must be between 0 and 1")
}
# Calculate Weibull parameters for the given sex
params <- if (sex == "Male") {
calculate_weibull_parameters(
data$median_male_results,
data$first_quartile_male_results,
data$threshold_male_results
)
} else if (sex == "Female") {
calculate_weibull_parameters(
data$median_female_results,
data$first_quartile_female_results,
data$threshold_female_results
)
} else {
stop("Invalid sex. Please choose 'Male' or 'Female'.")
}
alphas <- params$alpha
betas <- params$beta
thresholds <- if (sex == "Male") data$threshold_male_results else data$threshold_female_results
asymptotes <- if (sex == "Male") data$asymptote_male_results else data$asymptote_female_results
x_values <- seq(1, max_age)
# Calculate cumulative densities for the specified sex
cumulative_density <- mapply(function(alpha, beta, threshold, asymptote) {
pweibull(x_values - threshold, shape = alpha, scale = beta) * asymptote
}, alphas, betas, thresholds, asymptotes, SIMPLIFY = FALSE)
distributions_matrix <- matrix(unlist(cumulative_density), nrow = length(x_values), byrow = FALSE)
mean_density <- rowMeans(distributions_matrix, na.rm = TRUE)
# Calculate credible intervals
lower_prob <- (1 - prob) / 2
upper_prob <- 1 - lower_prob
lower_ci <- apply(distributions_matrix, 1, quantile, probs = lower_prob)
upper_ci <- apply(distributions_matrix, 1, quantile, probs = upper_prob)
# Extract cumulative data from the Panelpro Database
dim_names <- attr(db_sim$Penetrance, "dimnames")
cancer_index <- which(dim_names[[1]] == cancer)
gene_index <- which(dim_names[[2]] == gene)
race_index <- which(dim_names[[3]] == race)
sex_index <- which(dim_names[[4]] == sex)
type_index <- which(dim_names[[6]] == type)
density_data <- db_sim$Penetrance[cancer_index, gene_index, race_index, sex_index, , type_index]
cumulative_density_panelpro <- cumsum(density_data)
# Create data frame for plotting
age_values <- seq_along(density_data)
min_length <- min(length(cumulative_density_panelpro), length(mean_density))
plot_df <- data.frame(
age = age_values[1:min_length],
cumulative_density_panelpro = cumulative_density_panelpro[1:min_length],
mean_density = mean_density[1:min_length],
lower_ci = lower_ci[1:min_length],
upper_ci = upper_ci[1:min_length]
)
# Plot the cumulative densities with credible intervals
p <- ggplot(plot_df, aes(x = age)) +
geom_line(aes(y = cumulative_density_panelpro, color = "Data-generating penetrance"), linewidth = 1, linetype = "solid", na.rm = TRUE) +
geom_line(aes(y = mean_density, color = "Estimated penetrance"), linewidth = 1, linetype = "dotted", na.rm = TRUE) +
geom_ribbon(aes(ymin = lower_ci, ymax = upper_ci), alpha = 0.2, fill = "red", na.rm = TRUE) +
labs(title = paste("Cumulative Density Comparison for", sex, "in", race),
x = "Age",
y = "Cumulative Density") +
theme_minimal() +
scale_color_manual(values = c("Data-generating penetrance" = "blue",
"Estimated penetrance" = "red")) +
scale_y_continuous(labels = scales::percent) +
theme(legend.title = element_blank())
print(p)
# Calculate Mean Squared Error (MSE)
mse <- mean((plot_df$cumulative_density_panelpro - plot_df$mean_density)^2, na.rm = TRUE)
cat("Mean Squared Error (MSE):", mse, "\n")
# Calculate Confidence Interval Coverage
coverage <- mean((plot_df$cumulative_density_panelpro >= plot_df$lower_ci) &
(plot_df$cumulative_density_panelpro <= plot_df$upper_ci), na.rm = TRUE)
cat("Confidence Interval Coverage:", coverage, "\n")
}
# Plot
plot_penetrance_comparison(
data = out_sim_COL_MLH1_sim130$combined_chains,
db_sim = PanelPRODatabase,
prob = 0.95,
max_age = 94,
cancer = "Colorectal",
gene = "MLH1_hetero_anyPV",
sex = "Female",
race = "All_Races",
type = "Net"
)
plot_penetrance_comparison(
data = out_sim_COL_MLH1_sim130$combined_chains,
db_sim = PanelPRODatabase,
prob = 0.95,
max_age = 94,
cancer = "Colorectal",
gene = "MLH1_hetero_anyPV",
sex = "Male",
race = "All_Races",
type = "Net"
)
str(out_sim_COL_MLH1_sim130)
# Set up age sequence as in the PanelPRO database
age <- 1:94
# use same BRCA1 frequency (not estimated)
MLH1freq <- 0.1
PanelPRODatabase$AlleleFrequency[["MLH1_anyPV",2]] <- MLH1freq
PanelPRODatabase$AlleleFrequency[["MLH1_anyPV",3]] <- MLH1freq
# Given mean and variance
alpha <- 2 # Replace with the value you have
beta  <- 50 # Replace with the value you have
gamma <- 0.6
delta <-  15
# Now use alpha and beta in your simulation
penetrance.mod.f <- dweibull(age - delta, alpha, beta) * gamma
# For now focus on just one vector of penetrance estimates
gene <- "MLH1_hetero_anyPV"
cancer <- "Colorectal"
race <- "All_Races"
sex <- "Female"
type <- "Net"
# Find the indices for the resp. attributes
dim_names <- attr(PanelPRODatabase$Penetrance, "dimnames")
gene_index <- which(dim_names$Gene == gene)
cancer_index <- which(dim_names$Cancer == cancer)
race_index <- which(dim_names$Race == race)
sex_index <- which(dim_names$Sex == sex)
type_index <- which(dim_names$PenetType == type)
# Overwrite the penetetrane for all races, geneders and races
PanelPRODatabase$Penetrance[cancer_index, gene_index, race_index, sex_index , ,]<- penetrance.mod.f
# Given mean and variance
alpha <- 2 # Replace with the value you have
beta  <- 50 # Replace with the value you have
gamma <- 0.6
delta <- 30
# Now use alpha and beta in your simulation
penetrance.mod.m <- dweibull(age - delta, alpha, beta) * gamma
# For now focus on just one vector of penetrance estimates
gene <- "MLH1_hetero_anyPV"
cancer <- "Colorectal"
race <- "All_Races"
sex <- "Male"
type <- "Net"
# Find the indices for the resp. attributes
dim_names <- attr(PanelPRODatabase$Penetrance, "dimnames")
gene_index <- which(dim_names$Gene == gene)
cancer_index <- which(dim_names$Cancer == cancer)
race_index <- which(dim_names$Race == race)
sex_index <- which(dim_names$Sex == sex)
type_index <- which(dim_names$PenetType == type)
# Overwrite the penetetrane for all races, geneders and races
PanelPRODatabase$Penetrance[cancer_index, gene_index, race_index, sex_index , ,]<- penetrance.mod.m
# Function to calculate Weibull parameters
calculate_weibull_parameters <- function(given_median, given_first_quartile, delta) {
# Calculate alpha
alpha <- log(-log(0.5) / -log(0.75)) / log((given_median - delta) / (given_first_quartile - delta))
# Calculate beta using the median (M)
beta <- (given_median - delta) / (-log(0.5))^(1 / alpha)
return(list(alpha = alpha, beta = beta))
}
# Function to calculate Weibull cumulative density
weibull_cumulative <- function(x, alpha, beta, threshold, asymptote) {
pweibull(x - threshold, shape = alpha, scale = beta) * asymptote
}
# Function to plot the penetrance and compare with Panelpro Database
plot_penetrance_comparison <- function(data, db_sim, prob, max_age, cancer, gene, sex, race, type) {
if (prob <= 0 || prob >= 1) {
stop("prob must be between 0 and 1")
}
# Calculate Weibull parameters for the given sex
params <- if (sex == "Male") {
calculate_weibull_parameters(
data$median_male_results,
data$first_quartile_male_results,
data$threshold_male_results
)
} else if (sex == "Female") {
calculate_weibull_parameters(
data$median_female_results,
data$first_quartile_female_results,
data$threshold_female_results
)
} else {
stop("Invalid sex. Please choose 'Male' or 'Female'.")
}
alphas <- params$alpha
betas <- params$beta
thresholds <- if (sex == "Male") data$threshold_male_results else data$threshold_female_results
asymptotes <- if (sex == "Male") data$asymptote_male_results else data$asymptote_female_results
x_values <- seq(1, max_age)
# Calculate cumulative densities for the specified sex
cumulative_density <- mapply(function(alpha, beta, threshold, asymptote) {
pweibull(x_values - threshold, shape = alpha, scale = beta) * asymptote
}, alphas, betas, thresholds, asymptotes, SIMPLIFY = FALSE)
distributions_matrix <- matrix(unlist(cumulative_density), nrow = length(x_values), byrow = FALSE)
mean_density <- rowMeans(distributions_matrix, na.rm = TRUE)
# Calculate credible intervals
lower_prob <- (1 - prob) / 2
upper_prob <- 1 - lower_prob
lower_ci <- apply(distributions_matrix, 1, quantile, probs = lower_prob)
upper_ci <- apply(distributions_matrix, 1, quantile, probs = upper_prob)
# Extract cumulative data from the Panelpro Database
dim_names <- attr(db_sim$Penetrance, "dimnames")
cancer_index <- which(dim_names[[1]] == cancer)
gene_index <- which(dim_names[[2]] == gene)
race_index <- which(dim_names[[3]] == race)
sex_index <- which(dim_names[[4]] == sex)
type_index <- which(dim_names[[6]] == type)
density_data <- db_sim$Penetrance[cancer_index, gene_index, race_index, sex_index, , type_index]
cumulative_density_panelpro <- cumsum(density_data)
# Create data frame for plotting
age_values <- seq_along(density_data)
min_length <- min(length(cumulative_density_panelpro), length(mean_density))
plot_df <- data.frame(
age = age_values[1:min_length],
cumulative_density_panelpro = cumulative_density_panelpro[1:min_length],
mean_density = mean_density[1:min_length],
lower_ci = lower_ci[1:min_length],
upper_ci = upper_ci[1:min_length]
)
# Plot the cumulative densities with credible intervals
p <- ggplot(plot_df, aes(x = age)) +
geom_line(aes(y = cumulative_density_panelpro, color = "Data-generating penetrance"), linewidth = 1, linetype = "solid", na.rm = TRUE) +
geom_line(aes(y = mean_density, color = "Estimated penetrance"), linewidth = 1, linetype = "dotted", na.rm = TRUE) +
geom_ribbon(aes(ymin = lower_ci, ymax = upper_ci), alpha = 0.2, fill = "red", na.rm = TRUE) +
labs(title = paste("Cumulative Density Comparison for", sex, "in", race),
x = "Age",
y = "Cumulative Density") +
theme_minimal() +
scale_color_manual(values = c("Data-generating penetrance" = "blue",
"Estimated penetrance" = "red")) +
scale_y_continuous(labels = scales::percent) +
theme(legend.title = element_blank())
print(p)
# Calculate Mean Squared Error (MSE)
mse <- mean((plot_df$cumulative_density_panelpro - plot_df$mean_density)^2, na.rm = TRUE)
cat("Mean Squared Error (MSE):", mse, "\n")
# Calculate Confidence Interval Coverage
coverage <- mean((plot_df$cumulative_density_panelpro >= plot_df$lower_ci) &
(plot_df$cumulative_density_panelpro <= plot_df$upper_ci), na.rm = TRUE)
cat("Confidence Interval Coverage:", coverage, "\n")
}
# Plot
plot_penetrance_comparison(
data = out_sim_COL_MLH1_sim130$combined_chains,
db_sim = PanelPRODatabase,
prob = 0.95,
max_age = 94,
cancer = "Colorectal",
gene = "MLH1_hetero_anyPV",
sex = "Female",
race = "All_Races",
type = "Net"
)
plot_penetrance_comparison(
data = out_sim_COL_MLH1_sim130$combined_chains,
db_sim = PanelPRODatabase,
prob = 0.95,
max_age = 94,
cancer = "Colorectal",
gene = "MLH1_hetero_anyPV",
sex = "Male",
race = "All_Races",
type = "Net"
)
load("/Users/nicolaskubista/Partners HealthCare Dropbox/BayesMendel/Projects/Active/NK_PenetranceEstimation/3_Code/test_fam.RData")
test_fam
load("/Users/nicolaskubista/Partners HealthCare Dropbox/BayesMendel/Projects/Active/NK_PenetranceEstimation/3_Code/selected_families_weibull_130.RData")
selected_families_weibull_130
load("/Users/nicolaskubista/Partners HealthCare Dropbox/BayesMendel/Projects/Active/NK_PenetranceEstimation/3_Code/test_fam.RData")
test_fam
selected_families_weibull_130
load("/Users/nicolaskubista/Partners HealthCare Dropbox/BayesMendel/Projects/Active/NK_PenetranceEstimation/3_Code/selected_families_weibull_130.2.RData")
selected_families_weibull_130.2
dat <- selected_families_weibull_130.2
# Data Preperation in the right format
for (i in seq_along(dat)) {
if ("ID" %in% colnames(dat[[i]])) {
colnames(dat[[i]])[colnames(dat[[i]]) == "PedigreeID"] <- "FamilyID"
}
}
for (i in seq_along(dat)) {
# Add a new column "PedigreeID" with the list number
dat[[i]]$PedigreeID <- i
}
# Change "isAffCOL" to "isAff" if "isAffCOL" is a column
for (i in seq_along(dat)) {
if ("isAffCOL" %in% colnames(dat[[i]])) {
colnames(dat[[i]])[colnames(dat[[i]]) == "isAffCOL"] <- "isAff"
}
}
for (i in seq_along(dat)) {
if ("AgeCOL" %in% colnames(dat[[i]])) {
colnames(dat[[i]])[colnames(dat[[i]]) == "AgeCOL"] <- "Age"
}
}
for (i in seq_along(dat)) {
if ("MLH1" %in% colnames(dat[[i]])) {
colnames(dat[[i]])[colnames(dat[[i]]) == "MLH1"] <- "geno"
}
}
dat
dat
test_fam <- dat
test_fam
save(test_fam, file = "test_fam.Rdata")
setwd("~/Documents/Master Statistics/Master Thesis/Code/PenEstim")
library(penetrance)
devtools::document()
roxygen2::roxygenise()
library(penetrance)
devtools::build_vignettes()
devtools::build_vignettes()
roxygen2::roxygenise()
devtools::document()
devtools::build_vignettes()
library(penetrance)
library(penetrance)
load("/Users/nicolaskubista/Documents/Master Statistics/Master Thesis/Code/PenEstim/data/out_sim_COL_MLH1_sim130.Rdata")
setwd("~/Documents/Master Statistics/Master Thesis/Code/PenEstim/data")
save(out_sim, file = "out_sim.RData")
out_sim <- out_sim_COL_MLH1_sim130
save(out_sim, file = "out_sim.RData")
setwd("~/Documents/Master Statistics/Master Thesis/Code/PenEstim")
library(penetrance)
library(penetrance)
knitr::opts_chunk$set(echo = TRUE)
library(penetrance)
dat <- load(system.file("data", "test_fam.RData", package = "penetrance"))
load("/Users/nicolaskubista/Documents/Master Statistics/Master Thesis/Code/PenEstim/data/test_fam.RData")
library(penetrance)
knitr::opts_chunk$set(echo = TRUE)
library(penetrance)
dat <- load(system.file("data", "test_fam.RData", package = "penetrance"))
library(penetrance)
dat <- load(system.file("data", "test_fam.RData", package = "penetrance"))
list.files(system.file("data", package = "penetrance"))
setwd("~/Documents/Master Statistics/Master Thesis/Code/PenEstim")
list.files(system.file("data", package = "penetrance"))
Rdata.rdb
laod(Rdata.rdb)
load(Rdata.rdb)
library(penetrance)
str(out_sim)
setwd("~/Documents/Master Statistics/Master Thesis/Code/PenEstim")
devtools::document()
devtools::document()
library(penetrance)
library(penetrance)
library(penetrance)
R CMD check path_to_your_package
devtools::check()
library(penetrance)
devtools::document()
load("/Users/nicolaskubista/Documents/Master Statistics/Master Thesis/Code/PenEstim/data/test_fam.RData")
test_fam1 <- test_fam
save(test_fam1, l"/Users/nicolaskubista/Documents/Master Statistics/Master Thesis/Code/PenEstim/data/test_fam1.RData")
save(test_fam1, "/Users/nicolaskubista/Documents/Master Statistics/Master Thesis/Code/PenEstim/data/test_fam1.RData")
save(test_fam1, file = "/Users/nicolaskubista/Documents/Master Statistics/Master Thesis/Code/PenEstim/data/test_fam1.RData")
load("/Users/nicolaskubista/Documents/Master Statistics/Master Thesis/Code/PenEstim/data/test_fam.RData")
test_fam2 <- test_fam
save(test_fam2, file = "/Users/nicolaskubista/Documents/Master Statistics/Master Thesis/Code/PenEstim/data/test_fam2.RData")
devtools::document()
library(penetrance)
devtools::build_vignettes()
devtools::build_vignettes()
devtools::build_vignettes()
devtools::build_vignettes()
library(penetrance)
