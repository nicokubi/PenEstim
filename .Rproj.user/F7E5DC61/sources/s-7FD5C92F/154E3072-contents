---
title: "PenEstim"
subtitle: "Simulation Study - PanelPRO Database"
format: 
  html:
    toc: true
    toc-location: body
date: 5-14-2024
theme: lightly
author:
  - name: "Nicolas Kubista"
    affiliations: "Harvard University"
embed-resources: true
toc: true
toc-expand: 2
toc-title: Contents
page-layout: full
code-fold: true
editor: visual
---

```{r, echo=FALSE, include=FALSE}
library(clipp)
library(survival)
library(plyr) #need to load plyr before dplyr
library(truncnorm)
library(PanelPRO)
library(tidyverse)
library(stringr)
library(PedUtils)
library(survival)
library(MASS)
library(profvis)
library(survminer)
library(ggridges)
library(ggplot2)
library(dplyr)


source("/Users/nicolaskubista/Documents/Master Statistics/Master Thesis/Code/Submission/PenEstim/R/prior_elicitation.R")
source("/Users/nicolaskubista/Documents/Master Statistics/Master Thesis/Code/Submission/PenEstim/R/helpers.R")
source("/Users/nicolaskubista/Documents/Master Statistics/Master Thesis/Code/Submission/PenEstim/R/outputHelpers.R")
source("/Users/nicolaskubista/Documents/Master Statistics/Master Thesis/Code/Submission/PenEstim/R/mhLoglikehood_clipp.R")
source("/Users/nicolaskubista/Documents/Master Statistics/Master Thesis/Code/Submission/PenEstim/R/mcmcPenetrance_vMWG.R")
source("/Users/nicolaskubista/Documents/Master Statistics/Master Thesis/Code/Submission/PenEstim/R/mcmcPenetrance_v7.R")
source("/Users/nicolaskubista/Documents/Master Statistics/Master Thesis/Code/Submission/PenEstim/R/InternalVars.R")
source("/Users/nicolaskubista/Documents/Master Statistics/Master Thesis/Code/Submission/Additional Scripts/EstimEval.R")

set.seed(2024)
```

# COH MLH1 Families

```{r desc fams, echo=TRUE, cache=TRUE}

# Function to describe the families
describeFamilies <- function(fams, cancer, gene) {
  # Validate and translate cancer type
  if (!cancer %in% CANCER_NAME_MAP$long) {
    stop("Cancer type '", cancer, "' is not supported. Please choose from the supported list.")
  }
  
  # Get the abbreviation for the cancer type
  cancer_index <- which(CANCER_NAME_MAP$long == cancer)
  cancer_short <- CANCER_NAME_MAP$short[cancer_index]
  
  # Construct column names based on cancer type and gene input
  aff_col_name <- paste0("isAff", cancer_short)
  age_col_name <- paste0("Age", cancer_short)
  
  # Initialize counters and vectors for storing data
  affectedFamilies = 0 
  affectedProbands = 0
  famSizes = c()
  geneFamilies = 0
  geneProbands = 0 
  curAges = c()
  cancerAges = c()
  pbCancerAges = c()
  pbCurAges = c()
  pbCancerAgesFemale = c()
  affectedFemaleProbands = 0
  geneFemaleProbands = 0 
  cancerAgesFemale = c()
  total_individuals = 0
  gene_individuals = 0
  
  # Process each family
  for(i in 1:length(fams)){
    f = fams[[i]]
    sizeOfFamily = nrow(f)
    total_individuals = total_individuals + sizeOfFamily
    famSizes = c(famSizes, sizeOfFamily)
    curAges = c(curAges, f$CurAge)  
    f = f %>% dplyr::filter(!!rlang::sym(aff_col_name) == 1, isProband == 0) 
    cancerAges <- c(cancerAges, f[[age_col_name]])  
    ff = fams[[i]] %>% dplyr::filter(!!rlang::sym(gene) == 1, !!rlang::sym(aff_col_name) == 1) 
    gene_individuals = gene_individuals + nrow(ff)
    cancerAgesFemale <- c(cancerAgesFemale, ff[[age_col_name]])  

    if(nrow(f)>0){
      affectedFamilies = affectedFamilies + 1
    }
    geneFams = fams[[i]] %>% dplyr::filter(isProband == 0, !!rlang::sym(gene) == 1)
    if(nrow(geneFams) > 0){
     geneFamilies = geneFamilies + 1
    }
    
    pb <- fams[[i]] %>% dplyr::filter(isProband == 1)
    pbfemale <- fams[[i]] %>% dplyr::filter(isProband == 1, Sex == 0)
    
    if (nrow(pbfemale) > 0) {
      pbCancerAgesFemale <- c(pbCancerAgesFemale, pbfemale[[age_col_name]])
      if (any(pbfemale[[aff_col_name]] == 1)){
        affectedFemaleProbands <- affectedFemaleProbands + 1
      }
      if (!is.na(pbfemale[[gene]])){
        if (any(pbfemale[[gene]] == 1)){
          geneFemaleProbands <- geneFemaleProbands + 1
        }
      }
    }
  
    pbCancerAges <- c(pbCancerAges, pb[[age_col_name]])
    pbCurAges <- c(pbCurAges, pb$CurAge)  
    
    if (any(pb[[aff_col_name]] == 1)){
      affectedProbands <- affectedProbands + 1
    }
    
    if (!is.na(pb[[gene]])){
      if (any(pb[[gene]] == 1)){
        geneProbands <- geneProbands + 1
      }
    }
  }

  print(paste0("Number of families: ", length(fams)))
  print(paste0("Total Individuals: ", total_individuals))
  print(paste0("Average family size: ", mean(famSizes)))
  print("Summary of family sizes")
  print(summary(famSizes))
  print("Summary of Current Age for all family members")
  print(summary(curAges))
  print("Summary of Current Age for probands")
  print(summary(pbCurAges))
  
  print(paste0("Number of families with affected individuals (", cancer, "): ", 
               affectedFamilies))
  print(paste0("Number of families with affected probands (", cancer, "): ", 
               affectedProbands))
  print(paste0("Number of families with affected female probands (", cancer, "): ", 
               affectedFemaleProbands))
  print(paste0("Number of families with relatives with PV (and not the proband) (", gene, "): ", geneFamilies))
  print(paste0("Number of probands with PV (", gene, "): ", geneProbands))
  print(paste0("Number of female probands with PV (", gene, "): ", 
               geneFemaleProbands))
  print(paste0("Number of individuals with PV (", gene, "): ", gene_individuals))
  
  print("Summary of Cancer Age of (female) probands")
  print(summary(pbCancerAgesFemale))

  print("Summary of Cancer Age in affected (non-proband) individuals")
  print(summary(cancerAges))
}


```

```{r fam4, echo=FALSE, cache=TRUE}
load("/Users/nicolaskubista/Dropbox (Partners HealthCare)/CCGCRN Hispanic Cohort Data/PenEstim/Data/carrierProbandFamilies_cohPedigree_MLH1_ages.RData")
describeFamilies(carrierProbandFamilies_cohPedigree_MLH1_ages,"Colorectal","MLH1")

```

The data-generating cumulative penetrances curves for males and females for carriers of the PV and the population (SEER) are given below.

```{r pendesc, echo=TRUE, cache=TRUE}
# Define a function to plot cumulative density
plot_baseline <- function(cancer_type, gene, gender) {
  # Extract cumulative data
  cumulative_density_gene <- cumsum(PanelPRODatabase$Penetrance[cancer_type, paste0(gene, "_hetero_anyPV"), "All_Races", gender, , "Net"])
  cumulative_density_SEER <- cumsum(PanelPRODatabase$Penetrance[cancer_type, "SEER", "All_Races", gender, , "Net"])
  
  # Create data frame for plotting
  age_values <- seq_along(cumulative_density_gene)
  plot_df <- data.frame(
    age = age_values,
    cumulative_density_gene = cumulative_density_gene,
    cumulative_density_SEER = cumulative_density_SEER
  )
  
  # Plot cumulative density
  plot <- ggplot(plot_df, aes(x = age)) +
    geom_line(aes(y = cumulative_density_gene, color = "Carrier Cumulative Density"), linewidth = 1, linetype = "solid", na.rm = TRUE) +
    geom_line(aes(y = cumulative_density_SEER, color = "SEER Cumulative Density"), linewidth = 1, linetype = "dotted", na.rm = TRUE) +
    labs(title = paste("Cumulative Density Comparison for", gender, "with", cancer_type),
         x = "Age",
         y = "Cumulative Density") +
    theme_minimal() +
    scale_color_manual(values = c("Carrier Cumulative Density" = "red", 
                                "SEER Cumulative Density" = "blue")) +
  scale_y_continuous(labels = scales::percent) +
  theme(legend.title = element_blank())
  
  return(plot)
}

# Plot for Males with Colorectal Cancer and MLH1 gene
plot_male_colorectal_MLH1 <- plot_baseline("Colorectal", "MLH1", "Male")
print(plot_male_colorectal_MLH1)

# Plot for Females with Colorectal Cancer and MLH1 gene
plot_female_colorectal_MLH1 <- plot_baseline("Colorectal", "MLH1", "Female")
print(plot_female_colorectal_MLH1)
```

# Estimation 


```{r est1, echo=TRUE, cache=TRUE}

dat <- carrierProbandFamilies_cohPedigree_MLH1_ages

# Data Prep
for (i in seq_along(dat)) {
    if ("ID" %in% colnames(dat[[i]])) {
        colnames(dat[[i]])[colnames(dat[[i]]) == "PedigreeID"] <- "FamilyID"
    }
}

#  Data Prep
for (i in seq_along(dat)) {
    if ("ID" %in% colnames(dat[[i]])) {
        colnames(dat[[i]])[colnames(dat[[i]]) == "ID"] <- "SubjectID"
    }
}

for (i in seq_along(dat)) {
    # Add a new column "PedigreeID" with the list number
    dat[[i]]$PedigreeID <- i
}


# Exploring different priors 
prior_params <- list(
    asymptote = list(g1 = 1, g2 = 1),
    threshold = list(min = 5, max = 30),
    median = list(m1 = 2, m2 = 2),
    first_quartile = list(q1 = 6, q2 = 3)
)

# Run Estimation procedure with default prior setting 
# Main Estimation for Female
system.time(out_sim_COL <- PenEstim_v7(
    data = dat,
    cancer_type = "Colorectal", gene_input = "MLH1", n_chains = 1, n_iter_per_chain = 10000, 
    prior_params = prior_params, af = 0.1, burn_in = 0.1, median_max = TRUE, priors = prior_params
))
save(out_sim_COL, file = "out_sim_COL.Rdata")

# print summary stats
out_sim_COL$summary_stats
plot_traceSingle(out_sim_COL$results[[1]])

# plot the scatterplot with the median and first quartile
plot(out_sim_COL$combined_chains$median_male_results, out_sim_COL$combined_chains$first_quartile_male_results, xlim = c(1,100), ylim = c(1,100))
abline(a=0, b=1, col="red") # This draws a red line with slope 1 passing through the origin
plot(out_sim_COL$combined_chains$median_female_results, out_sim_COL$combined_chains$first_quartile_female_results, xlim = c(1,100), ylim = c(1,100))
abline(a=0, b=1, col="red") # This draws a red line with slope 1 passing through the origin
plot(out_sim_COL$combined_chains$median_male_results, out_sim_COL$combined_chains$asymptote_male_results, xlim = c(1,100), ylim = c(1,100))
abline(a=0, b=1, col="red") # This draws a red line with slope 1 passing through the origin
plot(out_sim_COL$combined_chains$median_female_results, out_sim_COL$combined_chains$asymptote_female_results, xlim = c(1,100), ylim = c(1,100))
abline(a=0, b=1, col="red") # This draws a red line with slope 1 passing through the origin
```

```{r acf2, echo=TRUE, cache=TRUE}
## ACF Plots 
acf(out_sim_COL$results[[1]]$first_quartile_male_samples, main = "ACF of First Quartile - Male")
acf(out_sim_COL$results[[1]]$first_quartile_female_samples, main = "ACF of First Quartile - Female")
acf(out_sim_COL$results[[1]]$median_male_samples, main = "ACF of Median - Male")
acf(out_sim_COL$results[[1]]$median_female_samples, main = "ACF of Median - Female")
acf(out_sim_COL$results[[1]]$threshold_male_samples, main = "ACF of Threshold - Male")
acf(out_sim_COL$results[[1]]$threshold_female_samples, main = "ACF of Threshold - Female")
```
