---
title: "DataGeneration"
format: 
  html:
    toc: true
    toc_float: true
    number_sections: true
    theme: cosmo
    left:
        - text: "Home"
          href: index.html
        - text: "Section 1"
          href: #section-1
        - text: "Section 2"
          href: #section-2
---

```{r}
# Simulation
library(plyr) #need to load plyr before dplyr
library(truncnorm)
library(PanelPRO)
library(tidyverse)
library(stringr)
library(PedUtils)
library(survival)
library(MASS)
library(profvis)
library(survminer)
library(ggridges)

source("/Users/nicolaskubista/Documents/Master Statistics/Master Thesis/Code/Submission/PenEstim/R/prior_elicitation.R")
source("/Users/nicolaskubista/Documents/Master Statistics/Master Thesis/Code/Submission/PenEstim/R/helpers.R")
source("/Users/nicolaskubista/Documents/Master Statistics/Master Thesis/Code/Submission/PenEstim/R/outputHelpers.R")
source("/Users/nicolaskubista/Documents/Master Statistics/Master Thesis/Code/Submission/PenEstim/R/mhLoglikehood_clipp.R")
source("/Users/nicolaskubista/Documents/Master Statistics/Master Thesis/Code/Submission/PenEstim/R/mcmcPenetrance.R")
source("/Users/nicolaskubista/Documents/Master Statistics/Master Thesis/Code/Submission/PenEstim/R/InternalVars.R")
```

```{r desc, echo=FALSE, cache=TRUE}

# Function to describe the families
describeFamilies <- function(fams, cancer, gene) {
  # Validate and translate cancer type
  if (!cancer %in% CANCER_NAME_MAP$long) {
    stop("Cancer type '", cancer, "' is not supported. Please choose from the supported list.")
  }
  
  # Get the abbreviation for the cancer type
  cancer_index <- which(CANCER_NAME_MAP$long == cancer)
  cancer_short <- CANCER_NAME_MAP$short[cancer_index]
  
  # Construct column names based on cancer type and gene input
  aff_col_name <- paste0("isAff", cancer_short)
  age_col_name <- paste0("Age", cancer_short)
  
  # Initialize counters and vectors for storing data
  affectedFamilies = 0 
  affectedProbands = 0
  famSizes = c()
  geneFamilies = 0
  geneProbands = 0 
  curAges = c()
  cancerAges = c()
  pbCancerAges = c()
  pbCurAges = c()
  pbCancerAgesFemale = c()
  affectedFemaleProbands = 0
  geneFemaleProbands = 0 
  cancerAgesFemale = c()
  total_individuals = 0
  gene_individuals = 0
  
  # Process each family
  for(i in 1:length(fams)){
    f = fams[[i]]
    sizeOfFamily = nrow(f)
    total_individuals = total_individuals + sizeOfFamily
    famSizes = c(famSizes, sizeOfFamily)
    curAges = c(curAges, f$CurAge)  
    f = f %>% dplyr::filter(!!rlang::sym(aff_col_name) == 1) 
    cancerAges <- c(cancerAges, f[[age_col_name]])  
    ff = fams[[i]] %>% dplyr::filter(!!rlang::sym(gene) == 1, !!rlang::sym(aff_col_name) == 1) 
    gene_individuals = gene_individuals + nrow(ff)
    cancerAgesFemale <- c(cancerAgesFemale, ff[[age_col_name]])  

    if(nrow(f)>0){
      affectedFamilies = affectedFamilies + 1
    }
    geneFams = fams[[i]] %>% dplyr::filter(isProband == 0, !!rlang::sym(gene) == 1)
    if(nrow(geneFams) > 0){
     geneFamilies = geneFamilies + 1
    }
    
    pb <- fams[[i]] %>% dplyr::filter(isProband == 1)
    pbfemale <- fams[[i]] %>% dplyr::filter(isProband == 1, Sex == 0)
    
    if (nrow(pbfemale) > 0) {
      pbCancerAgesFemale <- c(pbCancerAgesFemale, pbfemale[[age_col_name]])
      if (any(pbfemale[[aff_col_name]] == 1)){
        affectedFemaleProbands <- affectedFemaleProbands + 1
      }
      if (!is.na(pbfemale[[gene]])){
        if (any(pbfemale[[gene]] == 1)){
          geneFemaleProbands <- geneFemaleProbands + 1
        }
      }
    }
  
    pbCancerAges <- c(pbCancerAges, pb[[age_col_name]])
    pbCurAges <- c(pbCurAges, pb$CurAge)  
    
    if (any(pb[[aff_col_name]] == 1)){
      affectedProbands <- affectedProbands + 1
    }
    
    if (!is.na(pb[[gene]])){
      if (any(pb[[gene]] == 1)){
        geneProbands <- geneProbands + 1
      }
    }
  }

  print(paste0("Number of families: ", length(fams)))
  print(paste0("Total Individuals: ", total_individuals))
  print(paste0("Average family size: ", mean(famSizes)))
  print("Summary of family sizes")
  print(summary(famSizes))
  print("Summary of Current Age for all family members")
  print(summary(curAges))
  print("Summary of Current Age for probands")
  print(summary(pbCurAges))
  
  print(paste0("Number of families with affected individuals (", cancer, "): ", 
               affectedFamilies))
  print(paste0("Number of families with affected probands (", cancer, "): ", 
               affectedProbands))
  print(paste0("Number of families with affected female probands (", cancer, "): ", 
               affectedFemaleProbands))
  print(paste0("Number of families with relatives with PV (and not the proband) (", gene, "): ", geneFamilies))
  print(paste0("Number of probands with PV (", gene, "): ", geneProbands))
  print(paste0("Number of female probands with PV (", gene, "): ", 
               geneFemaleProbands))
  print(paste0("Number of individuals with PV (", gene, "): ", gene_individuals))
  
  print("Summary of Cancer Age of (female) probands")
  print(summary(pbCancerAgesFemale))

  print("Summary of Cancer Age in affected (non-proband) individuals")
  print(summary(cancerAges))
  
  print("Summary of Cancer Age in affected (non-proband) female individuals")
  print(summary(cancerAgesFemale))
}

# Function to plot the penetrance curves separately for males and females
plot_penetrance_curves <- function(fams) {
  # Define plot settings
  plot_settings <- function(title) {
    plot(0, 0, type = "n", xlim = c(0, 100), ylim = c(0, 1), xlab = "Age", ylab = "Penetrance", main = title)
  }

  # Initialize colors and line types
  colors <- c("red", "blue")
  line_types <- c(1, 2)

  # Function to process and plot data for a given sex
  process_and_plot <- function(fams, sex) {
    # Create empty data frames to aggregate the data
    allcarriers <- data.frame()
    allnoncarriers <- data.frame()

    # Iterate through each family and aggregate the data
    for (f in fams) {
      carriers <- dplyr::filter(f, BRCA1 == 1, Sex == sex)
      noncarriers <- dplyr::filter(f, BRCA1 == 0, Sex == sex)

      # Append the data to the combined data frames
      allcarriers <- rbind(allcarriers, carriers)
      allnoncarriers <- rbind(allnoncarriers, noncarriers)
    }

    # Convert the cancer status variable to survival objects for each genotype
    surv_obj_1 <- Surv(time = allcarriers$AgeBC, event = allcarriers$isAffBC)
    surv_obj_0 <- Surv(time = allnoncarriers$AgeBC, event = allnoncarriers$isAffBC)

    # Estimate the Kaplan-Meier survival curves for each genotype
    km_fit_1 <- survfit(surv_obj_1 ~ 1, data = allcarriers)
    km_fit_0 <- survfit(surv_obj_0 ~ 1, data = allnoncarriers)

    # Calculate the penetrance functions for carriers and non-carriers
    penetrance_1 <- 1 - km_fit_1$surv
    penetrance_0 <- 1 - km_fit_0$surv

    # Plot the aggregated penetrance curves
    lines(km_fit_1$time, penetrance_1, type = "l", col = colors[1], lty = line_types[1])
    lines(km_fit_0$time, penetrance_0, type = "l", col = colors[2], lty = line_types[2])

    # Add legend
    legend("topright", legend = c("PV", "Non-PV"), col = colors, lty = line_types, cex = 0.8)
  }

  # Plot for females
  plot_settings("Estimated Penetrance Curves (for females)")
  process_and_plot(fams, 0)  # Assuming Sex = 0 represents females

  # Plot for males
  plot_settings("Estimated Penetrance Curves (for males)")
  process_and_plot(fams, 1)  # Assuming Sex = 1 represents males
}

```
# Data Simulation
## Sim 1

Censored data
Simulate 1000 families, out of which 81 have a proband with the mutation

```{r, echo=TRUE,cache=TRUE}
set.seed(2024)

# Generate Families ----

families_sim1= list()
probandIDS = c()
probandBRCA1Status = c()
probandAffectionStatus = c()


# Set number of families to be generates
numberFamilies <- 1000 # fewer families being generated here 
#Â age
age <- seq(1, 94, 1)  # same as in the panelpro db

# use same BRCA1 frequency (not estimated)
BRCA1freq <- 0.1
PanelPRODatabase$AlleleFrequency[["BRCA1_anyPV",1]] <- BRCA1freq
PanelPRODatabase$AlleleFrequency[["BRCA1_anyPV",2]] <- BRCA1freq
PanelPRODatabase$AlleleFrequency[["BRCA1_anyPV",3]] <- BRCA1freq

# Given mean and variance
alpha<- 2.5 # Replace with the value you have
beta  <- 50 # Replace with the value you have
gamma <- 1
delta <-  20

# Now use alpha and beta in your simulation
penetrance.mod <- dweibull(age - delta, alpha, beta) * gamma


# For now focus on just one vector of penetrance estimates
gene <- "BRCA1_hetero_anyPV"
cancer <- "Breast"
race <- "All_Races"
sex <- "Female"
type <- "Net"

# Find the indices for the resp. attributes 

dim_names <- attr(PanelPRODatabase$Penetrance, "dimnames")
gene_index <- which(dim_names$Gene == gene)
cancer_index <- which(dim_names$Cancer == cancer)
race_index <- which(dim_names$Race == race)
sex_index <- which(dim_names$Sex == sex)
type_index <- which(dim_names$PenetType == type)

# Overwrite the penetetrane for all races, geneders and races
PanelPRODatabase$Penetrance[cancer_index, gene_index, race_index, sex_index , ,]<- penetrance.mod

 suppressMessages(suppressWarnings(capture.output(for(i in 1:numberFamilies){
  # Cancers
  cancers = "Breast"
  # Genes
  genes = "BRCA1"
  #family members
  # Paternal aunts, paternal uncles
  nSibsPatern =floor(rtruncnorm(n=2, mean=0, 1))
  # Maternal aunts, maternal uncles
  nSibsMatern = floor(rtruncnorm(n=2, mean=0, 1))
  # Sisters and brothers
  nSibs = floor(rtruncnorm(n=2, mean=1, 1))
  # We make the assumption that the number of sons and daughters for the
  # proband and all siblings, is the same. Nieces and nephews of the proband
  # are not sampled separately1
  nGrandchild = floor(rtruncnorm(n=2, mean=0, 1))
  nChild = floor(rtruncnorm(n=2, mean=1, 1))
  
  # Simulate family using `PedUtils` code
  fam = sim.runSimFam(nSibsPatern, nSibsMatern, nSibs, nChild,
                      PanelPRODatabase, genes, cancers,
                      includeGeno = TRUE, includeBiomarkers = FALSE, 
                      censoring = TRUE)
  
  famDF = as.data.frame(fam)
  proband = famDF %>% filter(isProband==1)
  probandIDS = c(probandIDS, proband$ID)
  probandBRCA1Status = c(probandBRCA1Status, proband$BRCA1)
  probandAffectionStatus = c(probandAffectionStatus, proband$isAffBC)
  families_sim1[[i]] = famDF
  
}))) 

save(families_sim1, file = "families_sim1.RData")
# Filter families with affected probands
carrierProbandfamilies_sim1 <- Filter(function(fam) 
  any(fam$isProband == 1 & fam$BRCA1 == 1 & fam$Sex == 0), families_sim1)


# hide genotype information for everyone but the proband
simFamiliesGeno <- function(fams) {
  
  simFamilies <- list()
  # Assuming you have the original list of families stored as `original_families`
  # and a vector of proband IDs called `proband_ids`
  for (i in 1:length(fams)) {
    family <- fams[[i]]
    proband <-  family %>% filter(isProband==1)
    family$BRCA1 <- ifelse(family$ID == proband$ID, family$BRCA1, NA)
    simFamilies[[i]] <- family
  }
  return(simFamilies)
  
}

# Subset the family list
simfamilies_sim1 <- simFamiliesGeno(carrierProbandfamilies_sim1)
save(simfamilies_sim1, file = "simfamilies_sim1.Rdata")
print(describeFamilies(simfamilies_sim1,"Breast","BRCA1"))
plot_penetrance_curves(carrierProbandfamilies_sim1) 

```


## Sim 2

Censored data
191 families 

```{r, echo=TRUE,cache=TRUE}
set.seed(2024)

# Generate Families ----

families_sim2= list()
probandIDS = c()
probandBRCA1Status = c()
probandAffectionStatus = c()


# Set number of families to be generates
numberFamilies <- 2000
#Â age
age <- seq(1, 94, 1)  # same as in the panelpro db

# use same BRCA1 frequency (not estimated)
BRCA1freq <- 0.1
PanelPRODatabase$AlleleFrequency[["BRCA1_anyPV",1]] <- BRCA1freq
PanelPRODatabase$AlleleFrequency[["BRCA1_anyPV",2]] <- BRCA1freq
PanelPRODatabase$AlleleFrequency[["BRCA1_anyPV",3]] <- BRCA1freq

# Given mean and variance
alpha<- 2.5 # Replace with the value you have
beta  <- 50 # Replace with the value you have
gamma <- 1
delta <-  20

# Now use alpha and beta in your simulation
penetrance.mod <- dweibull(age - delta, alpha, beta) * gamma

# For now focus on just one vector of penetrance estimates
gene <- "BRCA1_hetero_anyPV"
cancer <- "Breast"
race <- "All_Races"
sex <- "Female"
type <- "Net"

# Find the indices for the resp. attributes 

dim_names <- attr(PanelPRODatabase$Penetrance, "dimnames")
gene_index <- which(dim_names$Gene == gene)
cancer_index <- which(dim_names$Cancer == cancer)
race_index <- which(dim_names$Race == race)
sex_index <- which(dim_names$Sex == sex)
type_index <- which(dim_names$PenetType == type)

# Overwrite the penetetrane for all races, geneders and races
PanelPRODatabase$Penetrance[cancer_index, gene_index, race_index, sex_index , ,]<- array(penetrance.mod, dim = c(1, 1, 1, 1, 94, 1))


 suppressMessages(suppressWarnings(capture.output(for(i in 1:numberFamilies){
  # Cancers
  cancers = "Breast"
  # Genes
  genes = "BRCA1"
  #family members
  # Paternal aunts, paternal uncles
  nSibsPatern =floor(rtruncnorm(n=2, mean=0, 1))
  # Maternal aunts, maternal uncles
  nSibsMatern = floor(rtruncnorm(n=2, mean=0, 1))
  # Sisters and brothers
  nSibs = floor(rtruncnorm(n=2, mean=1, 1))
  # We make the assumption that the number of sons and daughters for the
  # proband and all siblings, is the same. Nieces and nephews of the proband
  # are not sampled separately1
  nGrandchild = floor(rtruncnorm(n=2, mean=0, 1))
  nChild = floor(rtruncnorm(n=2, mean=1, 1))
  
  # Simulate family using `PedUtils` code
  fam = sim.runSimFam(nSibsPatern, nSibsMatern, nSibs, nChild,
                      PanelPRODatabase, genes, cancers,
                      includeGeno = TRUE, includeBiomarkers = FALSE, 
                      censoring = TRUE)
  
  famDF = as.data.frame(fam)
  proband = famDF %>% filter(isProband==1)
  probandIDS = c(probandIDS, proband$ID)
  probandBRCA1Status = c(probandBRCA1Status, proband$BRCA1)
  probandAffectionStatus = c(probandAffectionStatus, proband$isAffBC)
  families_sim2[[i]] = famDF
  
})))

save(families_sim2, file = "families_sim2.RData")
# Filter families with affected probands
carrierProbandfamilies_sim2 <- Filter(function(fam) 
  any(fam$isProband == 1 & fam$BRCA1 == 1 & fam$Sex == 0), families_sim2)


# hide genotype information for everyone but the proband
simFamiliesGeno <- function(fams) {
  
  simFamilies <- list()
  # Assuming you have the original list of families stored as `original_families`
  # and a vector of proband IDs called `proband_ids`
  for (i in 1:length(fams)) {
    family <- fams[[i]]
    proband <-  family %>% filter(isProband==1)
    family$BRCA1 <- ifelse(family$ID == proband$ID, family$BRCA1, NA)
    simFamilies[[i]] <- family
  }
  return(simFamilies)
  
}

# Subset the family list
simfamilies_sim2 <- simFamiliesGeno(carrierProbandfamilies_sim2)
save(simfamilies_sim2, file = "simfamilies_sim2.Rdata")
print(describeFamilies(simfamilies_sim2,"Breast","BRCA1"))
plot_penetrance_curves(carrierProbandfamilies_sim2)
```

## Sim 3

Censored data
Simulated 3000 families

```{r, echo=TRUE,cache=TRUE}
#set seed
set.seed(2024)

# Generate Families
numberFamilies <- 3000  # Set number of families to be generated
families_sim3 <- list()  # Initialize list for families data

# Set up age sequence as in the PanelPRO database
age <- 1:94

# Set up and modify PanelPRO Database
db <- PanelPRO::PanelPRODatabase
BRCA1freq <- 0.1  # use same BRCA1 frequency (not estimated)
db$AlleleFrequency[["BRCA1_anyPV",1]] <- BRCA1freq
db$AlleleFrequency[["BRCA1_anyPV",2]] <- BRCA1freq
db$AlleleFrequency[["BRCA1_anyPV",3]] <- BRCA1freq

# Function to modify penetrance in database
modify_penetrance <- function(db, gene, cancer, race, sex, type, age_delta, alpha, beta, gamma) {
  penetrance.mod <- dweibull(age - age_delta, alpha, beta) * gamma
  dim_names <- attr(db$Penetrance, "dimnames")
  
  gene_index <- which(dim_names$Gene == gene)
  cancer_index <- which(dim_names$Cancer == cancer)
  race_index <- which(dim_names$Race == race)
  sex_index <- which(dim_names$Sex == sex)
  type_index <- which(dim_names$PenetType == type)
  
  # Overwrite the penetrance for all races, genders, and races
  db$Penetrance[cancer_index, gene_index, , , , ] <- array(rep(penetrance.mod, each = 16), dim = c(1, 1, 8, 2, 94, 2))
}

# Modify penetrance for female
modify_penetrance(db, "BRCA1_hetero_anyPV", "Breast", "All_Races", "Female", "Net", 20, 2.5, 50, 1)

# Modify penetrance for male
modify_penetrance(db, "BRCA1_hetero_anyPV", "Breast", "All_Races", "Male", "Net", 20, 30, 300, 1)
# Simulation
 suppressMessages(suppressWarnings(capture.output(for(i in 1:numberFamilies){
  # Cancers
  cancers = "Breast"
  # Genes
  genes = "BRCA1"
  #family members
  # Paternal aunts, paternal uncles
  nSibsPatern =floor(rtruncnorm(n=2, mean=0, 1))
  # Maternal aunts, maternal uncles
  nSibsMatern = floor(rtruncnorm(n=2, mean=0, 1))
  # Sisters and brothers
  nSibs = floor(rtruncnorm(n=2, mean=1, 1))
  # We make the assumption that the number of sons and daughters for the
  # proband and all siblings, is the same. Nieces and nephews of the proband
  # are not sampled separately1
  nGrandchild = floor(rtruncnorm(n=2, mean=0, 1))
  nChild = floor(rtruncnorm(n=2, mean=1, 1))
  
  # Simulate family using `PedUtils` code
  fam = sim.runSimFam(nSibsPatern, nSibsMatern, nSibs, nChild,
                      db, genes, cancers,
                      includeGeno = TRUE, includeBiomarkers = FALSE, 
                      censoring = TRUE)
  
  famDF = as.data.frame(fam)
  proband = famDF %>% filter(isProband==1)
  probandIDS = c(probandIDS, proband$ID)
  probandBRCA1Status = c(probandBRCA1Status, proband$BRCA1)
  probandAffectionStatus = c(probandAffectionStatus, proband$isAffBC)
  families_sim3[[i]] = famDF
  
})))

save(families_sim3, file = "families_sim3.RData")
# Filter families with affected probands
carrierProbandfamilies_sim3 <- Filter(function(fam) 
  any(fam$isProband == 1 & fam$BRCA1 == 1), families_sim3)


# hide genotype information for everyone but the proband
simFamiliesGeno <- function(fams) {
  
  simFamilies <- list()
  # Assuming you have the original list of families stored as `original_families`
  # and a vector of proband IDs called `proband_ids`
  for (i in 1:length(fams)) {
    family <- fams[[i]]
    proband <-  family %>% filter(isProband==1)
    family$BRCA1 <- ifelse(family$ID == proband$ID, family$BRCA1, NA)
    simFamilies[[i]] <- family
  }
  return(simFamilies)
  
}

# Subset the family list
simfamilies_sim3 <- simFamiliesGeno(carrierProbandfamilies_sim3)
save(simfamilies_sim3, file = "simfamilies_sim3.Rdata")
print(describeFamilies(simfamilies_sim3,"Breast","BRCA1"))

# Analysis
# Perform survival analysis stratified by gender
data <- do.call(rbind, carrierProbandfamilies_sim3)
str(data)

fit <- survfit(Surv(AgeBC, isAffBC) ~ BRCA1 + strata(Sex), data = data)
ggsurvplot(fit, risk.table = TRUE, data = data, palette = "Dark2")


# Plot density ridges for affected individuals, stratified by Sex
ggplot(data = data[data$isAffBC == 1,], aes(x = AgeBC, y = as.factor(BRCA1), fill = as.factor(BRCA1))) +
  geom_density_ridges() +
  facet_wrap(~ Sex, scales = "free_y")

# Plot density ridges for non-affected individuals, stratified by Sex
ggplot(data = data[data$isAffBC == 0,], aes(x = AgeBC, y = as.factor(BRCA1), fill = as.factor(BRCA1))) +
  geom_density_ridges() +
  facet_wrap(~ Sex, scales = "free_y")

```


## Sim 3 - NO CENSORING

Simulated 3000 families

```{r, echo=TRUE,cache=TRUE}
set.seed(2024)

# Generate Families ----

families_sim3_UC = list()
probandIDS_UC = c()
probandBRCA1Status_UC = c()
probandAffectionStatus_UC = c()

# Set number of families to be generates
numberFamilies <- 3000
# age
age <- seq(1, 94, 1)  # same as in the panelpro db

# use same BRCA1 frequency (not estimated)
BRCA1freq <- 0.1
db$AlleleFrequency[["BRCA1_anyPV",1]] <- BRCA1freq
db$AlleleFrequency[["BRCA1_anyPV",2]] <- BRCA1freq
db$AlleleFrequency[["BRCA1_anyPV",3]] <- BRCA1freq

# Given mean and variance
alpha <- 2.5 # Replace with the value you have
beta  <- 50 # Replace with the value you have
gamma <- 1
delta <-  20

# Now use alpha and beta in your simulation
penetrance_mod_UC <- dweibull(age - delta, alpha, beta) * gamma

# For now focus on just one vector of penetrance estimates
gene <- "BRCA1_hetero_anyPV"
cancer <- "Breast"
race <- "All_Races"
sex <- "Female"
type <- "Net"

# Find the indices for the resp. attributes 
dim_names <- attr(PanelPRODatabase$Penetrance, "dimnames")
gene_index <- which(dim_names$Gene == gene)
cancer_index <- which(dim_names$Cancer == cancer)
race_index <- which(dim_names$Race == race)
sex_index <- which(dim_names$Sex == sex)
type_index <- which(dim_names$PenetType == type)

# Overwrite the penetrance for all races, genders and races
PanelPRODatabase$Penetrance[cancer_index, gene_index, race_index, sex_index , ,] <- penetrance_mod_UC

 suppressMessages(suppressWarnings(capture.output(for(i in 1:numberFamilies) {
  # Cancers
  cancers = "Breast"
  # Genes
  genes = "BRCA1"
  # Family members
  nSibsPatern = floor(rtruncnorm(n=2, mean=0, 1))
  nSibsMatern = floor(rtruncnorm(n=2, mean=0, 1))
  nSibs = floor(rtruncnorm(n=2, mean=1, 1))
  nGrandchild = floor(rtruncnorm(n=2, mean=0, 1))
  nChild = floor(rtruncnorm(n=2, mean=1, 1))
  
  fam_UC = sim.runSimFam(nSibsPatern, nSibsMatern, nSibs, nChild,
                         PanelPRODatabase, genes, cancers,
                         includeGeno = TRUE, includeBiomarkers = FALSE, 
                         censoring = FALSE)
  
  famDF_UC = as.data.frame(fam_UC)
  proband_UC = famDF_UC %>% filter(isProband==1)
  probandIDS_UC = c(probandIDS_UC, proband_UC$ID)
  probandBRCA1Status_UC = c(probandBRCA1Status_UC, proband_UC$BRCA1)
  probandAffectionStatus_UC = c(probandAffectionStatus_UC, proband_UC$isAffBC)
  families_sim3_UC[[i]] = famDF_UC
  
})))

save(families_sim3_UC, file = "families_sim3_UC.RData")

# Filter families with affected probands
carrierProbandfamilies_sim3_UC <- Filter(function(fam) 
  any(fam$isProband == 1 & fam$BRCA1 == 1 & fam$Sex == 0), families_sim3_UC)

# Hide genotype information for everyone but the proband
simFamiliesGeno_UC <- function(fams) {
  simFamilies_UC <- list()
  for (i in 1:length(fams)) {
    family_UC <- fams[[i]]
    proband_UC <- family_UC %>% filter(isProband==1)
    family_UC$BRCA1 <- ifelse(family_UC$ID == proband_UC$ID, family_UC$BRCA1, NA)
    simFamilies_UC[[i]] <- family_UC
  }
  return(simFamilies_UC)
}

# Subset the family list
simfamilies_sim3_UC <- simFamiliesGeno_UC(carrierProbandfamilies_sim3_UC)
save(simfamilies_sim3_UC, file = "simfamilies_sim3_UC.Rdata")
print(describeFamilies(simfamilies_sim3_UC,"Breast","BRCA1"))
plot_penetrance_curves(carrierProbandfamilies_sim3_UC)
  
```

## Sim 4 - Constant risk

Simulated 1000 families

```{r, echo=TRUE,cache=TRUE}
set.seed(2024)

# Generate Families ----

families__sim4 = list()
probandIDS_UC = c()
probandBRCA1Status_UC = c()
probandAffectionStatus_UC = c()

# Set number of families to be generates
numberFamilies <- 2000
# age
age <- seq(1, 94, 1)  # same as in the panelpro db

# use same BRCA1 frequency (not estimated)
BRCA1freq <- 0.1
PanelPRODatabase$AlleleFrequency[["BRCA1_anyPV",1]] <- BRCA1freq
PanelPRODatabase$AlleleFrequency[["BRCA1_anyPV",2]] <- BRCA1freq
PanelPRODatabase$AlleleFrequency[["BRCA1_anyPV",3]] <- BRCA1freq

# Given mean and variance
alpha <- 2.5 # Replace with the value you have
beta  <- 50 # Replace with the value you have
gamma <- 1
delta <-  20

# Now use alpha and beta in your simulation
penetrance_mod_UC <- dweibull(age - delta, alpha, beta) * gamma

# For now focus on just one vector of penetrance estimates
gene <- "BRCA1_hetero_anyPV"
cancer <- "Breast"
race <- "All_Races"
sex <- "Female"
type <- "Net"

# Find the indices for the resp. attributes 
dim_names <- attr(PanelPRODatabase$Penetrance, "dimnames")
gene_index <- which(dim_names$Gene == gene)
cancer_index <- which(dim_names$Cancer == cancer)
race_index <- which(dim_names$Race == race)
sex_index <- which(dim_names$Sex == sex)
type_index <- which(dim_names$PenetType == type)

# Overwrite the penetrance for all races, genders and races
PanelPRODatabase$Penetrance[cancer_index, gene_index, race_index, sex_index , ,] <- penetrance_mod_UC

sex <- "Male"
sex_index <- which(dim_names$Sex == sex)
PanelPRODatabase$Penetrance[cancer_index, gene_index, race_index, sex_index , ,] <- 0

 suppressMessages(suppressWarnings(capture.output(for(i in 1:numberFamilies) {
  # Cancers
  cancers = "Breast"
  # Genes
  genes = "BRCA1"
  # Family members
  nSibsPatern = floor(rtruncnorm(n=2, mean=0, 1))
  nSibsMatern = floor(rtruncnorm(n=2, mean=0, 1))
  nSibs = floor(rtruncnorm(n=2, mean=1, 1))
  nGrandchild = floor(rtruncnorm(n=2, mean=0, 1))
  nChild = floor(rtruncnorm(n=2, mean=1, 1))
  
  fam_UC = sim.runSimFam(nSibsPatern, nSibsMatern, nSibs, nChild,
                         PanelPRODatabase, genes, cancers,
                         includeGeno = TRUE, includeBiomarkers = FALSE, 
                         censoring = FALSE)
  
  famDF_UC = as.data.frame(fam_UC)
  proband_UC = famDF_UC %>% filter(isProband==1)
  probandIDS_UC = c(probandIDS_UC, proband_UC$ID)
  probandBRCA1Status_UC = c(probandBRCA1Status_UC, proband_UC$BRCA1)
  probandAffectionStatus_UC = c(probandAffectionStatus_UC, proband_UC$isAffBC)
  families__sim4[[i]] = famDF_UC
  
})))

save(families__sim4, file = "families__sim4.RData")

# Filter families with affected probands
carrierProbandfamilies__sim4 <- Filter(function(fam) 
  any(fam$isProband == 1 & fam$BRCA1 == 1 & fam$Sex == 0), families__sim4)

# Hide genotype information for everyone but the proband
simFamiliesGeno_UC <- function(fams) {
  simFamilies_UC <- list()
  for (i in 1:length(fams)) {
    family_UC <- fams[[i]]
    proband_UC <- family_UC %>% filter(isProband==1)
    family_UC$BRCA1 <- ifelse(family_UC$ID == proband_UC$ID, family_UC$BRCA1, NA)
    simFamilies_UC[[i]] <- family_UC
  }
  return(simFamilies_UC)
}

# Subset the family list
simfamilies__sim4 <- simFamiliesGeno_UC(carrierProbandfamilies__sim4)
save(simfamilies__sim4, file = "simfamilies__sim4.Rdata")
print(describeFamilies(simfamilies__sim4,"Breast","BRCA1"))
plot_penetrance_curves(carrierProbandfamilies__sim4)
  
```

#Â Analysis

We consider the distribution of age of onset for carriers and non-carriers of the PV tttttt

```{r, echo=TRUE,cache=TRUE}


# For censored data 
data <- do.call(rbind, carrierProbandfamilies_sim3)
str(data)

fit <- survfit(Surv(AgeBC, isAffBC) ~ BRCA1, data = data)
ggsurvplot(fit, risk.table = TRUE, data = data)


ggplot(data = data[data$isAffBC==1,], aes(x=AgeBC , y= as.factor(BRCA1),fill=as.factor(BRCA1))) +
geom_density_ridges()


ggplot(data = data[data$isAffBC==0,], aes(x=AgeBC , y= as.factor(BRCA1),fill=as.factor(BRCA1))) +
geom_density_ridges()


# Perform survival analysis stratified by gender
fit <- survfit(Surv(AgeBC, isAffBC) ~ BRCA1 + strata(Sex), data = data)
ggsurvplot(fit, risk.table = TRUE, data = data, palette = "Dark2")

# Ensure the 'Sex' column is used correctly; replace 'Sex' if it has a different name
fit <- survfit(Surv(AgeBC, isAffBC) ~ BRCA1 + strata(Sex), data = data)

# Use ggsurvplot
ggsurvplot(fit, data = data, risk.table = TRUE, palette = "Dark2",
           facet.by = "strata",  # This assumes your survfit uses strata for Sex
           ggtheme = theme_minimal())


head(data)
# With non-censored data

data <- do.call(rbind, carrierProbandfamilies_sim3_UC)
str(data)

fit <- survfit(Surv(AgeBC, isAffBC) ~ BRCA1, data = data)
ggsurvplot(fit, risk.table = TRUE, data = data)

# Plot density ridges for affected individuals, stratified by Sex
ggplot(data = data[data$isAffBC == 1,], aes(x = AgeBC, y = as.factor(BRCA1), fill = as.factor(BRCA1))) +
  geom_density_ridges() +
  facet_wrap(~ Sex, scales = "free_y")

# Plot density ridges for non-affected individuals, stratified by Sex
ggplot(data = data[data$isAffBC == 0,], aes(x = AgeBC, y = as.factor(BRCA1), fill = as.factor(BRCA1))) +
  geom_density_ridges() +
  facet_wrap(~ Sex, scales = "free_y")



ggplot(data = data[data$isAffBC==1,], aes(x=AgeBC , y= as.factor(BRCA1),fill=as.factor(BRCA1))) +
geom_density_ridges()


ggplot(data = data[data$isAffBC==0,], aes(x=AgeBC , y= as.factor(BRCA1),fill=as.factor(BRCA1))) +
geom_density_ridges()


````

