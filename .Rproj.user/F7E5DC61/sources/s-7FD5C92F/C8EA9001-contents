---
title: "Pedigree Simulation"
author: "Nicolas Kubista"
date: "6/14/2023"
output: html_document
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
library(plyr) #need to load plyr before dplyr
library(truncnorm)
library(PanelPRO)
library(tidyverse)
library(stringr)
library(PedUtils)
library(survival)
library(MASS)
library(profvis)

```


## Family Simulation - PanelPro Database

Simulating with the original penetrances from the PanelPro Database. The allele frequency is also ajusted.

```{r simulations1, include=FALSE}
# set seed 
set.seed(2023)

# Generate Families ----

families = list()
probandIDS = c()
probandBRCA1Status = c()
probandAffectionStatus = c()


# Set number of families to be generates
numberFamilies <- 10000

# Setting BRCA1 freq, if not needed 
# Chage the allele frequencies
BRCA1freq <- .4
PanelPRODatabase$AlleleFrequency[["BRCA1_anyPV",1]] <- BRCA1freq
PanelPRODatabase$AlleleFrequency[["BRCA1_anyPV",2]] <- BRCA1freq
PanelPRODatabase$AlleleFrequency[["BRCA1_anyPV",3]] <- BRCA1freq
save(PanelPRODatabase, file = "~/PanelPRO/data/PanelPRODatabase.rda")


for(i in 1:numberFamilies){
  # Cancers
  cancers = "Breast"
  # Genes
  genes = "BRCA1"
  #family members
  # Paternal aunts, paternal uncles
  nSibsPatern =floor(rtruncnorm(n=2, mean=0, 1))
  # Maternal aunts, maternal uncles
  nSibsMatern = floor(rtruncnorm(n=2, mean=0, 1))
  # Sisters and brothers
  nSibs = floor(rtruncnorm(n=2, mean=1, 1))
  # We make the assumption that the number of sons and daughters for the
  # proband and all siblings, is the same. Nieces and nephews of the proband
  # are not sampled separately1
  nGrandchild = floor(rtruncnorm(n=2, mean=0, 1))
  nChild = floor(rtruncnorm(n=2, mean=1, 1))
  
  # Simulate family using `PedUtils` code
  fam = sim.runSimFam(nSibsPatern, nSibsMatern, nSibs, nChild,
                      PanelPRODatabase, genes, cancers,
                      includeGeno = TRUE, includeBiomarkers = FALSE, censoring = TRUE)
  
  famDF = as.data.frame(fam)
  proband = famDF %>% filter(isProband==1)
  probandIDS = c(probandIDS, proband$ID)
  probandBRCA1Status = c(probandBRCA1Status, proband$BRCA1)
  probandAffectionStatus = c(probandAffectionStatus, proband$isAffBC)
  families[[i]] = famDF

}
```


```{r empirical1, include=TRUE}

allcarriers <- data.frame()
allnoncarriers <- data.frame()

# Plot the empirical penetrance curve
plot_penetrance_curves <- function(fams) {
  # Create an empty plot
  plot(0, 0, type = "n", xlim = c(0, 100), ylim = c(0, 1), xlab = "Age", ylab = "Penetrance",
       main = "Estimated Penetrance Curves (for females)")

  # Initialize colors and line types
  colors <- c("red", "blue")  
  line_types <- c(1, 2)  

  # Create empty data frames to aggregate the data
  allcarriers <- data.frame()
  allnoncarriers <- data.frame()

  # Iterate through each family and aggregate the data
  for (i in 1:length(fams)) {
    f <- fams[[i]]
    carriers <- f %>% filter(BRCA1 == 1) %>% filter(Sex == 0)
    noncarriers <- f %>% filter(BRCA1 == 0) %>% filter(Sex == 0)
    
    # Append the data to the combined data frames
    allcarriers<- rbind(allcarriers, carriers)
    allnoncarriers <- rbind(allnoncarriers, noncarriers)
  }
  
  # Convert the cancer status variable to survival objects for each genotype
  surv_obj_1 <- Surv(time = allcarriers$AgeBC, event = allcarriers$isAffBC)
  surv_obj_0 <- Surv(time = allnoncarriers$AgeBC, event = allnoncarriers$isAffBC)
  
  # Estimate the Kaplan-Meier survival curves for each genotype
  km_fit_1 <- survfit(surv_obj_1 ~ 1, data = allcarriers)
  km_fit_0 <- survfit(surv_obj_0 ~ 1, data = allnoncarriers)
  
  # Calculate the penetrance functions for carriers and non-carriers
  penetrance_1 <- 1 - km_fit_1$surv
  penetrance_0 <- 1 - km_fit_0$surv
  
  # Plot the aggregated penetrance curves
  lines(km_fit_1$time, penetrance_1, type = "l", col = colors[1], lty = line_types[1])
  lines(km_fit_0$time, penetrance_0, type = "l", col = colors[2], lty = line_types[2])
  
  # Add legend
  legend("topright", legend = c("PV", "Non-PV"), col = colors[1:2], lty = 1,
         cex = 0.8)
}


# Plot the empirical penetrance curves
plot_penetrance_curves(carrierProbandfamilies_sim3)

```

## Family Simulation - Weibull Distribution

Simulate families with Breast cancer and one cancer gene, BRCA1. 
We simulate a four-generation family with the proband in the third generation with  is "nonAJ" ancenstry and race is automatically set to "All_Races" (regardless of what prevalences/penetrances you feed in). 
Age ranges are  hard-coded, with the first generation (the founders) being centered at 100 and everybody else simulated based on that. The Age used in the Weibull distribution is shifted by 25 years to account for the fact that BC are very rare before the age of 25

The net penetrance (which are used for simulations) for Breast Cancer, given the BRCA1 gene (BRCA1_hetero_anyPV) are drawn from a Weibull distribution with parameters alpha and beta. The penetrance is set for female, non-AJ, across all races.

For the allele frequencies we use "non-AJ".

```{r simulations, include=FALSE}
# set seed 
set.seed(2023)

# Generate Families ----

families = list()
probandIDS = c()
probandBRCA1Status = c()
probandAffectionStatus = c()


# Set number of families to be generates
numberFamilies <- 10000

# Setting BRCA1 freq, if not needed 
# Chage the allele frequencies
BRCA1freq <- .1
PanelPRODatabase$AlleleFrequency[["BRCA1_anyPV",1]] <- BRCA1freq
PanelPRODatabase$AlleleFrequency[["BRCA1_anyPV",2]] <- BRCA1freq
PanelPRODatabase$AlleleFrequency[["BRCA1_anyPV",3]] <- BRCA1freq
save(PanelPRODatabase, file = "~/PanelPRO/data/PanelPRODatabase.rda")

# change the penetrance
# modify the penetrance for simulation
alpha <- 1
beta <- 50
gamma <- 0
age <- seq(1,94,1) # same as in the panelpro db
penetrance.mod <- dweibull(age-25,alpha, beta) * (1-gamma)


# For now focus on just one vector of penetrance estimates
gene <- "BRCA1_hetero_anyPV"
cancer <- "Breast"
race <- "All_Races"
sex <- "Female"
type <- "Net"

# Find the indices for the resp. attributes 

dim_names <- attr(PanelPRODatabase$Penetrance, "dimnames")
gene_index <- which(dim_names$Gene == gene)
cancer_index <- which(dim_names$Cancer == cancer)
race_index <- which(dim_names$Race == race)
sex_index <- which(dim_names$Sex == sex)
type_index <- which(dim_names$PenetType == type)

# Overwrite the penetetrane for all races, geneders and races
PanelPRODatabase$Penetrance[cancer_index, gene_index, race_index, sex_index , ,] <- penetrance.mod

for(i in 1:numberFamilies){
  # Cancers
  cancers = "Breast"
  # Genes
  genes = "BRCA1"
  #family members
  # Paternal aunts, paternal uncles
  nSibsPatern =floor(rtruncnorm(n=2, mean=0, 1))
  # Maternal aunts, maternal uncles
  nSibsMatern = floor(rtruncnorm(n=2, mean=0, 1))
  # Sisters and brothers
  nSibs = floor(rtruncnorm(n=2, mean=1, 1))
  # We make the assumption that the number of sons and daughters for the
  # proband and all siblings, is the same. Nieces and nephews of the proband
  # are not sampled separately1
  nGrandchild = floor(rtruncnorm(n=2, mean=0, 1))
  nChild = floor(rtruncnorm(n=2, mean=1, 1))
  
  # Simulate family using `PedUtils` code
  fam = sim.runSimFam(nSibsPatern, nSibsMatern, nSibs, nChild,
                      PanelPRODatabase, genes, cancers,
                      includeGeno = TRUE, includeBiomarkers = FALSE, censoring = TRUE)
  
  famDF = as.data.frame(fam)
  proband = famDF %>% filter(isProband==1)
  probandIDS = c(probandIDS, proband$ID)
  probandBRCA1Status = c(probandBRCA1Status, proband$BRCA1)
  probandAffectionStatus = c(probandAffectionStatus, proband$isAffBC)
  families[[i]] = famDF

}


```


## Empirical Pepentrance Curve

```{r empirical, include=TRUE}

# Initialize the data frames before calling the function
allcarriers <- data.frame()
allnoncarriers <- data.frame()

# Plot the empirical penetrance curve
plot_penetrance_curves <- function(fams, allcarriers, allnoncarriers) {
  
  # Create an empty plot
  plot(0, 0, type = "n", xlim = c(0, 100), ylim = c(0, 1), xlab = "Age", ylab = "Penetrance",
       main = "Estimated Penetrance Curves (for females)")

  # Initialize colors and line types
  colors <- c("red", "blue")  
  line_types <- c(1, 2)  

  # Iterate through each family and aggregate the data
  for (i in 1:length(fams)) {
    f <- fams[[i]]
    carriers <- f %>% filter(BRCA1 == 1) %>% filter(Sex == 0)
    noncarriers <- f %>% filter(BRCA1 == 0) %>% filter(Sex == 0)
    
    # Append the data to the combined data frames
    allcarriers <- rbind(allcarriers, carriers)
    allnoncarriers <- rbind(allnoncarriers, noncarriers)
  }
 
  
  # Convert the cancer status variable to survival objects for each genotype
  surv_obj_1 <- Surv(time = allcarriers$AgeBC, event = allcarriers$isAffBC)
  surv_obj_0 <- Surv(time = allnoncarriers$AgeBC, event = allnoncarriers$isAffBC)
  
  # Estimate the Kaplan-Meier survival curves for each genotype
  km_fit_1 <- survfit(surv_obj_1 ~ 1, data = allcarriers)
  km_fit_0 <- survfit(surv_obj_0 ~ 1, data = allnoncarriers)
  
  # Calculate the penetrance functions for carriers and non-carriers
  penetrance_1 <- 1 - km_fit_1$surv
  penetrance_0 <- 1 - km_fit_0$surv
  
  # Plot the aggregated penetrance curves
  lines(km_fit_1$time, penetrance_1, type = "l", col = colors[1], lty = line_types[1])
  lines(km_fit_0$time, penetrance_0, type = "l", col = colors[2], lty = line_types[2])
  
  # Add legend
  legend("topright", legend = c("PV", "Non-PV"), col = colors[1:2], lty = 1,
         cex = 0.8)
  
  # Return the aggregated data frames
  return(list(allcarriers = allcarriers, allnoncarriers = allnoncarriers))
}

# Plot the Weibull distribution
plot(age, pweibull(age-25., alpha,beta) * (1-gamma), type="l", lwd=2, xlab="Age", ylab="Penetrance", 
     main="Weibull Distribution for Carriers")

# Plot the empirical penetrance curves
result <- plot_penetrance_curves(families, allcarriers, allnoncarriers)
allcarriers <- result$allcarriers
allnoncarriers <- result$allnoncarriers

```

## Descriptive Statistics - All Families

```{r desc}

describeFamilies <- function(fams){
  
  affectedFamilies = 0 
  affectedProbands = 0
  famSizes = c()
  BRCA1Families = 0
  BRCA1Probands = 0 
  curAges = 0
  BCAges = 0
  pbBCAges=0
  pbCurAges=0
  pbBCAgesfemale = 0
  affectedfemaleProbands = 0
  BRCA1femaleProbands = 0 
  BCAgesfemale = 0
  total_individuals = 0
  BRCA1_individuals = 0

  #affectedFamiliesList = list()
  #j = 1
  for(i in 1:length(fams)){
    f = fams[[i]]
    sizeOfFamily = nrow(f)
    total_individuals = total_individuals + sizeOfFamily
    famSizes = c(famSizes, sizeOfFamily)
    curAges = c(curAges, f$CurAge)  
    f = f %>% filter(isAffBC==1) %>% filter(isProband==0) 
    BCAges <- c(BCAges, f$AgeBC)  
    ff = fams[[i]] %>% filter(BRCA1==1) 
    BRCA1_individuals = BRCA1_individuals + nrow(ff)
    BCAgesfemale <- c(BCAgesfemale, ff$AgeBC)  

    if(nrow(f)>0){
      affectedFamilies = affectedFamilies + 1
    
    }
    BRCA1fams = fams[[i]] %>% filter(isProband==0) %>% filter(BRCA1==1)
    if(nrow(BRCA1fams) > 0){
     BRCA1Families = BRCA1Families + 1
    }
    
    pb <- fams[[i]] %>% filter(isProband == 1)
    pbfemale <- fams[[i]] %>% filter(isProband == 1) %>% filter(Sex == 0)
    
    
    # Check if pbfemale has any rows before accessing its columns
    if (nrow(pbfemale) > 0) {
      pbBCAgesfemale <- c(pbBCAgesfemale, pbfemale$AgeBC)
      if (any(pbfemale$isAffBC == 1)){
        affectedfemaleProbands <- affectedfemaleProbands + 1
      }
      if (!is.na(pbfemale$BRCA1)){
        if (any(pbfemale$BRCA1 == 1)){
          BRCA1femaleProbands <- BRCA1femaleProbands + 1
        }
      }
    }
  
    pbBCAges <- c(pbBCAges, pb$AgeBC)
    pbCurAges <- c(pbCurAges, pb$CurAge)  
    
    if (any(pb$isAffBC == 1)){
      affectedProbands <- affectedProbands + 1
    }
    
        if (!is.na(pb$BRCA1)){
      if (any(pb$BRCA1 == 1)){
        BRCA1Probands <- BRCA1Probands + 1
      }
    }
  }
    
 
  
  # careful with the description 
  # do the stratified descriptives 
  # check the weibull to look like 
  
  print(paste0("Number of families: ", length(fams)))
  print(paste0("Total Individuals: ", total_individuals))
  print(paste0("Average family size: ", mean(famSizes)))
  print("Summary of family sizes")
  print(summary(famSizes))
  print("Summary of Current Age for all family members")
  print(summary(curAges))
  print("Summary of Current Age for probands")
  print(summary(pbCurAges))
  
  print(paste0("Number of families with affected (BC) individuals: ", affectedFamilies))
  print(paste0("Number of families with affected (BC) probands: ", affectedProbands))
  print(paste0("Number of families with affected (BC) female probands: ", affectedfemaleProbands))
  print(paste0("Number of families with relatives with PV (and not the proband): ", BRCA1Families))
  print(paste0("Number of families with proband with PV: ", BRCA1Probands))
  print(paste0("Number of families with female proband with PV: ", BRCA1femaleProbands))
  print(paste0("Number of individuals with PV: ", BRCA1_individuals))
  
  print("Summary of BC Age of (female) probands")
  print(summary(pbBCAgesfemale))

  print("Summary of BC Age in affected (non-proband) individuals")
  print(summary(BCAges))
  
  print("Summary of BC Age in affected (non-proband) female individuals")
  print(summary(BCAgesfemale))
}

describeFamilies(families)


```

## Descriptive Statistics - Families with Female Proband with PV

```{r desc2}

# Filter families with affected probands
carrierProbandFamilies <- Filter(function(fam) any(fam$isProband == 1 & fam$BRCA1 == 1 & fam$Sex == 0), families)

describeFamilies(carrierProbandFamilies)

```

## Hiding genotype data for all relatives

```{r proband func}

# hide genotype information for eveyone but the proband

simFamiliesGeno <- function(fams) {

simFamilies <- list()
# Assuming you have the original list of families stored as `original_families`
# and a vector of proband IDs called `proband_ids`
for (i in 1:length(fams)) {
  family <- fams[[i]]
  proband <-  family %>% filter(isProband==1)
  family$BRCA1 <- ifelse(family$ID == proband$ID, family$BRCA1, NA)
  simFamilies[[i]] <- family
}
return(simFamilies)

}

# Subset the family list
simFamilies <- simFamiliesGeno(carrierProbandFamilies)

```



## Example Family

Selecting families at random and saving them into a seperate rda file to be shared. 

```{r ex}

# Initialize lists to store selected families
selectedFamilies <- list()

# Randomly select 
n = 3
selectedIndices <- sample(length(simFamilies), n)
for (i in selectedIndices) {
  selectedFamilies[[length(selectedFamilies) + 1]] <- simFamilies[[i]]
}

# Save the selected families
print(selectedFamilies)
save(selectedFamilies, file = "selected_families.RData")

````




