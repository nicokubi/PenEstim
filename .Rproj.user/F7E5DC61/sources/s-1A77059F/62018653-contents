---
title: "Penetrance Estimation with PenEstim"
author: "BayesMendel Lab"
output: rmarkdown::html_vignette
vignette: >
  %\VignetteIndexEntry{Age Imputation and Penetrance Estimation with PenEstim}
  %\VignetteEngine{knitr::rmarkdown}
  %\VignetteEncoding{UTF-8}
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
library(PenEstim)

```

The R package `PenEstim` provides an estimation of age-specific penetrance for complex family-based studies in a format compatible with with the PanelPRO R package.

This vignette demonstrates the process of age imputation and penetrance estimation using the PenEstim package. The imputation of ages is a crucial part of the MCMC routine, particularly for datasets with missing ages for both affected and non-affected individuals.

## Installation

To install, use

```
git clone git@github.com:bayesmendel/PenEstim.git
```
Open the source directory as new R project and install the package with 

```
devtools::install()
```

## Quick-start guide
This following is a quick-start guide for basic usage of the package. For greater detail on options, please refer to the other vignettes and documentation.

The primary function in the package is `PenEstim`. The package workflow includes three main parts: user input, including family data in the form of pedigrees and specification for the penetrance estimation, the estimation of the posterior distribution using the MCMC approach, and the outputting of the results in the form of the samples from the approximated posterior distribution, i.e. the estimated penetrance function. 

```{r}
library(PenEstim)
```

## Pedigree 

The user must specify the `pedigree` argument as a data frame with the following columns: 
 - `ID`: A numeric value representing the unique identifier for each individual. There should be no duplicated entries.
 - `Sex`: A numeric value where `0` indicates female and `1` indicates male. Missing entries are not currently supported.
 - `MotherID`: A numeric value representing the unique identifier for an individual's mother.
 - `FatherID`: A numeric value representing the unique identifier for an individual's father.
 - `isProband`: A numeric value where `1` indicates the individual is a proband and `0` otherwise.
 - `CurAge`: A numeric value indicating the age of censoring (current age if the person is alive or age at death if the person is deceased). Allowed ages range from `1` to `94`.
 - `isAff`: A numeric value indicating the affection status of cancer, with `1` for diagnosed individuals and `0` otherwise. Missing entries are not supported.
 - `Age`: A numeric value indicating the age of cancer diagnosis, encoded as `NA` if the individual was not diagnosed. Allowed ages range from `1` to `94`.
 - `Geno`: A column for germline testing or tumor marker testing results. Positive results should be coded as `1`, negative results as `0`, and unknown results as `NA` or left empty.

```{r}
test_fam_1
test_fam_2
```

### Age Imputation

The imputation of ages is performed based on the individual's affected status (aff), sex (sex), and their degree of relationship to the proband, who is a carrier of the pathogenic variant (PV).

To calculate the degree of relationship to the proband, we use the kinship matrix from the pedigree data. The degree of relationship between two individuals is twice the kinship coefficient.
For affected individuals (aff = 1), if a randomly drawn value is less than the relationship probability, the age is drawn from a Weibull distribution. The Weibull distribution parameters for males and females are $(\alpha, \beta, \delta)$. The quantile function of the Weibull distribution is used to draw the ages (separately for males and females).
If the random draw exceeds the relationship probability, the age is drawn from the SEER data using the inverse CDF method. In this case, the individual is assumed to be a non-carrier of the PV.
To calculate the empirical density for non-affected individuals, filter the dataset to include only non-affected individuals and estimate the density of their ages. Then randomly draw an age from this distribution for non-affected individuals.

## Prior Specification

To run the MCMC algorithm, the prior distributions for $\theta = (\alpha, \beta, \gamma, \delta)$ need to be specified. PenEstim provides the user with a flexible approach to prior specification, balancing customization with an easy-to-use workflow.
The following settings for the prior distribution specification are available:
- Default: The default setting employs pre-specified, uninformative priors.
- Custom Parameters: The user can tune the parameters of the default setting directly by overwriting the parameters in the prior_params_default object.
- Prior Elicitation from Existing Studies: The user can input data from previous penetrance studies to automatically elicit customized priors. The default setting is adjusted to reflect the additional information based on the provided inputs.

```{r prior, include=FALSE}
# Set the prior
prior_params_test <- list(
    asymptote = list(g1 = 1, g2 = 1),
    threshold = list(min = 5, max = 40),
    median = list(m1 = 2, m2 = 2),
    first_quartile = list(q1 = 6, q2 = 3)
)

distribution_data_test <- data.frame(
  row.names = c("min", "first_quartile", "median", "max"),
  age = c(NA, NA, NA, NA),
  at_risk = c(NA, NA, NA, NA)
)

```

## Estimation 

The version of the algorithm used includes:
- 10k iterations of the adaptive MH algorithm
- PanelPRODatabase defaults for the allele frequency (af) of MLH1
- The adapted mcmcPenetrance function reflects the asymptote values that are out of bounds back into the parameter space (0,1)

There are a few ways in which a user can specify how the estimation approach is run Available options are: 

```{r}
#' @param twins Identical twins or triplets in the family can be specifed. For example, to indicate that `ora024` and `ora027` are identical twins, and so are `aey063` and `aey064`, 
#' then we can use the following as the twins arguement: twins <- list(c("ora024", "ora027"), c("aey063", "aey064"))
#' @param n_chains Number of chains for parallel computation. Default is 1.
#' @param n_iter_per_chain Number of iterations for each chain. Default is 10000.
#' @param ncores Number of cores for parallel computation. Default is 6.
#' @param baseline_data Data for the baseline risk estimates (probability of developing cancer), such as population-level risk from a cancer registry. Default is the allele frequency for MLH1 from the PanelPRO database.
#' @param max_age Maximum age considered for analysis. Default is 94.
#' @param removeProband Logical, indicating whether to remove probands from the analysis. Default is FALSE.
#' @param ageImputation Logical, indicating whether to perform age imputation. Default is FALSE.
#' @param median_max Boolean indicating whether to use the baseline median age or max_age as an upper bound for the median proposal. Default is TRUE.
#' @param BaselineNC Boolean indicating that the non-carrier penetrance is assumed to be the baseline penetrance. Default is TRUE.
#' @param var Vector of variances for the proposal distribution. Default is c(0.1, 0.1, 2, 2, 5, 5, 5, 5).
#' @param burn_in Fraction of results to discard as burn-in (0 to 1). Default is 0 (no burn-in).
#' @param thinning_factor Factor by which to thin the results. Default is 1 (no thinning).
#' @param distribution_data Data for generating prior distributions.
#' @param af Allele frequency for the risk allele. Default is 0.0001.
#' @param max_penetrance Maximum penetrance considered for analysis. Default is 1.
#' @param sample_size Optional sample size for distribution generation.
#' @param ratio Optional ratio parameter for distribution generation.
#' @param prior_params Parameters for prior distributions.
#' @param risk_proportion Proportion of risk for distribution generation.
#' @param summary_stats Boolean indicating whether to include summary statistics in the output. Default is TRUE.
#' @param rejection_rates Boolean indicating whether to include rejection rates in the output. Default is TRUE.
#' @param density_plots Boolean indicating whether to include density plots in the output. Default is TRUE.
#' @param penetrance_plot Boolean indicating whether to include penetrance plots in the output. Default is TRUE.
#' @param probCI Probability level for confidence intervals in penetrance plots. Default is 0.95.
```


```{r data, include=FALSE}

# Run Estimation procedure with default prior setting
output <- out_sim_COL <- PenEstim(
    pedigree  = dat, twins = NULL, n_chains = 1, n_iter_per_chain = 10000, ncores = 4, baseline_data = baseline_data_default, 
    af  = 0.0001, 
    prior_params = prior_params_test, burn_in = 0.1, median_max = TRUE,  ageImputation = TRUE
)

```

## References

Cannings C, Thompson E, Skolnick M. Probability functions on complex pedigrees. 
Advances in Applied Probability, 1978;10(1):26-61.

Elston RC, Stewart J. A general model for the genetic analysis of pedigree data. 
Hum Hered. 1971;21(6):523-542.

Lange K. Mathematical and Statistical Methods for Genetic Analysis 
(second edition). Springer, New York. 2002.

Lange K, Elston RC. Extensions to pedigree analysis I. Likehood calculations 
for simple and complex pedigrees. Hum Hered. 1975;25(2):95-105.

