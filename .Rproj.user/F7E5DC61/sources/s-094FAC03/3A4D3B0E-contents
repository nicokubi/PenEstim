---
title: "PenEstim"
subtitle: "Simulation Study - PanelPRO Database Simulation - Large Sim"
format: 
  html:
    toc: true
    toc-location: body
date: 8-15-2024
theme: lightly
author:
  - name: "Nicolas Kubista"
    affiliations: "Harvard University"
embed-resources: true
toc: true
toc-expand: 2
toc-title: Contents
page-layout: full
code-fold: true
editor: visual
---

```{r, echo=FALSE, include=FALSE}
library(clipp)
library(survival)
library(plyr) #need to load plyr before dplyr
library(truncnorm)
library(PanelPRO)
library(tidyverse)
library(stringr)
library(PedUtils)
library(survival)
library(MASS)
library(profvis)
library(survminer)
library(ggridges)
library(ggplot2)
library(dplyr)
library(rlang)
library(gridExtra)
library(GGally)
library(PenEstim)

set.seed(2024)
source("/Users/nicolaskubista/Documents/Master Statistics/Master Thesis/Code/Submission/PenEstim_vFF/R/InternalVars.R")
source("/Users/nicolaskubista/Documents/Master Statistics/Master Thesis/Code/Submission/Additional Scripts/describeFamilies.R")
```

# Family Simulation - MLH1 and CRC

```{r fam4.2, echo=TRUE, cache=TRUE}
# load data
# Generate Families
numberFamilies <- 6000  # Set number of families to be generated
families_MLH1 <- list()  # Initialize list for families data
probandIDS = c()
probandMLH1Status = c()
probandAffectionStatus = c()

# Set up age sequence as in the PanelPRO database
age <- 1:94

# use same BRCA1 frequency (not estimated)
MLH1freq <- 0.2
PanelPRODatabase$AlleleFrequency[["MLH1_anyPV",1]] <- MLH1freq
PanelPRODatabase$AlleleFrequency[["MLH1_anyPV",2]] <- MLH1freq
PanelPRODatabase$AlleleFrequency[["MLH1_anyPV",3]] <- MLH1freq

# Given mean and variance
alpha <- 2 # Replace with the value you have
beta  <- 50 # Replace with the value you have
gamma <- 0.6
delta <-  15

# Now use alpha and beta in your simulation
penetrance.mod.f <- dweibull(age - delta, alpha, beta) * gamma

# For now focus on just one vector of penetrance estimates
gene <- "MLH1_hetero_anyPV"
cancer <- "Colorectal"
race <- "All_Races"
sex <- "Female"
type <- "Net"

# Find the indices for the resp. attributes 
dim_names <- attr(PanelPRODatabase$Penetrance, "dimnames")
gene_index <- which(dim_names$Gene == gene)
cancer_index <- which(dim_names$Cancer == cancer)
race_index <- which(dim_names$Race == race)
sex_index <- which(dim_names$Sex == sex)
type_index <- which(dim_names$PenetType == type)

# Overwrite the penetetrane for all races, geneders and races
PanelPRODatabase$Penetrance[cancer_index, gene_index, race_index, sex_index , ,]<- penetrance.mod.f

# Given mean and variance
alpha <- 2 # Replace with the value you have
beta  <- 50 # Replace with the value you have
gamma <- 0.6
delta <- 30

# Now use alpha and beta in your simulation
penetrance.mod.m <- dweibull(age - delta, alpha, beta) * gamma

# For now focus on just one vector of penetrance estimates
gene <- "MLH1_hetero_anyPV"
cancer <- "Colorectal"
race <- "All_Races"
sex <- "Male"
type <- "Net"

# Find the indices for the resp. attributes 
dim_names <- attr(PanelPRODatabase$Penetrance, "dimnames")
gene_index <- which(dim_names$Gene == gene)
cancer_index <- which(dim_names$Cancer == cancer)
race_index <- which(dim_names$Race == race)
sex_index <- which(dim_names$Sex == sex)
type_index <- which(dim_names$PenetType == type)

# Overwrite the penetetrane for all races, geneders and races
PanelPRODatabase$Penetrance[cancer_index, gene_index, race_index, sex_index , ,]<- penetrance.mod.m
  
# Simulation
 suppressMessages(suppressWarnings(capture.output(for(i in 1:numberFamilies){
  # Cancers
  cancers = "Colorectal"
  # Genes
  genes = "MLH1"
  #family members
  # Paternal aunts, paternal uncles
  nSibsPatern =floor(rtruncnorm(n=2, mean=1, 3))
  # Maternal aunts, maternal uncles
  nSibsMatern = floor(rtruncnorm(n=2, mean=1, 3))
  # Sisters and brothers
  nSibs = floor(rtruncnorm(n=2, mean=1, 1))
  # We make the assumption that the number of sons and daughters for the
  # proband and all siblings, is the same. Nieces and nephews of the proband
  # are not sampled separately1
  nGrandchild = floor(rtruncnorm(n=2, mean=0, 1))
  nChild = floor(rtruncnorm(n=2, mean=1, 1))
  
  # Simulate family using `PedUtils` code
  fam = sim.runSimFam(nSibsPatern, nSibsMatern, nSibs, nChild,
                      PanelPRODatabase, genes, cancers,
                      includeGeno = TRUE, includeBiomarkers = FALSE, 
                      censoring = TRUE)
  
  famDF = as.data.frame(fam)
  proband = famDF %>% filter(isProband==1)
  probandIDS = c(probandIDS, proband$ID)
  probandMLH1Status = c(probandMLH1Status, proband$MLH1)
  probandAffectionStatus = c(probandAffectionStatus, proband$isAffCOL)
  families_MLH1[[i]] = famDF
  
})))

save(families_MLH1, file = "families_MLH1.RData")
# Filter families with affected probands
carrierProbandfamilies_MLH1 <- Filter(function(fam) 
  any(fam$isProband == 1 & fam$MLH1 == 1), families_MLH1)


# hide genotype information for everyone but the proband
simFamiliesGeno <- function(fams) {
  
  simFamilies <- list()
  # Assuming you have the original list of families stored as `original_families`
  # and a vector of proband IDs called `proband_ids`
  for (i in 1:length(fams)) {
    family <- fams[[i]]
    proband <-  family %>% filter(isProband==1)
    family$MLH1 <- ifelse(family$ID == proband$ID, family$MLH1, NA)
    simFamilies[[i]] <- family
  }
  return(simFamilies)
}

simfamilies_MLH1_weibull <- simFamiliesGeno(carrierProbandfamilies_MLH1)

# Select 130.2 families at random
selected_families_weibull_large <- simfamilies_MLH1_weibull
save(selected_families_weibull_large, file = "selected_families_weibull_large.RData")

# Analysis
describeFamilies(selected_families_weibull_large, "Colorectal", "MLH1")
```

# Estimation
```{r est1, echo=TRUE, cache=TRUE}
dat <- selected_families_weibull_large

#Â Data Preperation in the right format
for (i in seq_along(dat)) {
  if ("ID" %in% colnames(dat[[i]])) {
    colnames(dat[[i]])[colnames(dat[[i]]) == "PedigreeID"] <- "FamilyID"
  }
}
for (i in seq_along(dat)) {
  # Add a new column "PedigreeID" with the list number
  dat[[i]]$PedigreeID <- i
}
# Change "isAffCOL" to "isAff" if "isAffCOL" is a column
for (i in seq_along(dat)) {
  if ("isAffCOL" %in% colnames(dat[[i]])) {
    colnames(dat[[i]])[colnames(dat[[i]]) == "isAffCOL"] <- "isAff"
  }
}
for (i in seq_along(dat)) {
  if ("AgeCOL" %in% colnames(dat[[i]])) {
    colnames(dat[[i]])[colnames(dat[[i]]) == "AgeCOL"] <- "Age"
  }
}
for (i in seq_along(dat)) {
  if ("MLH1" %in% colnames(dat[[i]])) {
    colnames(dat[[i]])[colnames(dat[[i]]) == "MLH1"] <- "geno"
  }
}
# Set the prior
prior_params <- list(
    asymptote = list(g1 = 1, g2 = 1),
    threshold = list(min = 5, max = 40),
    median = list(m1 = 2, m2 = 2),
    first_quartile = list(q1 = 6, q2 = 3)
)

# Use the SEER baseline
baselineMLH1 <- PPP::PanelPRODatabase$Penetrance["Colorectal","SEER","All_Races",,,"Net"]
# Adjust Format
baselineMLH1_df <- as.data.frame(t(baselineMLH1))
colnames(baselineMLH1_df) <- c("Female", "Male")
baselineMLH1_df$Age <- as.numeric(rownames(baselineMLH1_df))
baselineMLH1_df <- baselineMLH1_df[, c("Female", "Male")]

#Run Estimation procedure with default prior setting 
#Main Estimation for Female
system.time(out_sim_COL_MLH1_simLarge<- PenEstim(
    pedigree  = dat, twins = NULL, n_chains = 1, n_iter_per_chain = 10, ncores = 6, baseline_data = baselineMLH1_df , af  = PPP::PanelPRODatabase$AlleleFrequency[paste0("MLH1", "_anyPV"), "nonAJ"], 
    prior_params = prior_params, burn_in = 0.1, median_max = TRUE,  ageImputation = FALSE, removeProband = FALSE
))
save(out_sim_COL_MLH1_simLarge, file = "out_sim_COL_MLH1_simLarge.Rdata")

```

## Comparison vs. Data-Generating Penetrance


```{r comp1, echo=TRUE, cache=FALSE}
# Function to calculate Weibull parameters
calculate_weibull_parameters <- function(given_median, given_first_quartile, delta) {
    # Calculate alpha
    alpha <- log(-log(0.5) / -log(0.75)) / log((given_median - delta) / (given_first_quartile - delta))

    # Calculate beta using the median (M)
    beta <- (given_median - delta) / (-log(0.5))^(1 / alpha)

    return(list(alpha = alpha, beta = beta))
}

# Function to calculate Weibull cumulative density
weibull_cumulative <- function(x, alpha, beta, threshold, asymptote) {
  pweibull(x - threshold, shape = alpha, scale = beta) * asymptote
}

# Function to plot the penetrance and compare with Panelpro Database
plot_penetrance_comparison <- function(data, db_sim, prob, max_age, cancer, gene, sex, race, type) {
  if (prob <= 0 || prob >= 1) {
    stop("prob must be between 0 and 1")
  }

  # Calculate Weibull parameters for the given sex
  params <- if (sex == "Male") {
    calculate_weibull_parameters(
      data$median_male_results,
      data$first_quartile_male_results,
      data$threshold_male_results
    )
  } else if (sex == "Female") {
    calculate_weibull_parameters(
      data$median_female_results,
      data$first_quartile_female_results,
      data$threshold_female_results
    )
  } else {
    stop("Invalid sex. Please choose 'Male' or 'Female'.")
  }

  alphas <- params$alpha
  betas <- params$beta
  thresholds <- if (sex == "Male") data$threshold_male_results else data$threshold_female_results
  asymptotes <- if (sex == "Male") data$asymptote_male_results else data$asymptote_female_results

  x_values <- seq(1, max_age)

  # Calculate cumulative densities for the specified sex
  cumulative_density <- mapply(function(alpha, beta, threshold, asymptote) {
    pweibull(x_values - threshold, shape = alpha, scale = beta) * asymptote
  }, alphas, betas, thresholds, asymptotes, SIMPLIFY = FALSE)

  distributions_matrix <- matrix(unlist(cumulative_density), nrow = length(x_values), byrow = FALSE)
  mean_density <- rowMeans(distributions_matrix, na.rm = TRUE)

  # Calculate credible intervals
  lower_prob <- (1 - prob) / 2
  upper_prob <- 1 - lower_prob
  lower_ci <- apply(distributions_matrix, 1, quantile, probs = lower_prob)
  upper_ci <- apply(distributions_matrix, 1, quantile, probs = upper_prob)

  # Extract cumulative data from the Panelpro Database
  dim_names <- attr(db_sim$Penetrance, "dimnames")
  cancer_index <- which(dim_names[[1]] == cancer)
  gene_index <- which(dim_names[[2]] == gene)
  race_index <- which(dim_names[[3]] == race)
  sex_index <- which(dim_names[[4]] == sex)
  type_index <- which(dim_names[[6]] == type)

  density_data <- db_sim$Penetrance[cancer_index, gene_index, race_index, sex_index, , type_index]
  cumulative_density_panelpro <- cumsum(density_data)

  # Create data frame for plotting
  age_values <- seq_along(density_data)
  min_length <- min(length(cumulative_density_panelpro), length(mean_density))

  plot_df <- data.frame(
    age = age_values[1:min_length],
    cumulative_density_panelpro = cumulative_density_panelpro[1:min_length],
    mean_density = mean_density[1:min_length],
    lower_ci = lower_ci[1:min_length],
    upper_ci = upper_ci[1:min_length]
  )

  # Plot the cumulative densities with credible intervals
  p <- ggplot(plot_df, aes(x = age)) +
    geom_line(aes(y = cumulative_density_panelpro, color = "Data-generating penetrance"), linewidth = 1, linetype = "solid", na.rm = TRUE) +
    geom_line(aes(y = mean_density, color = "Estimated penetrance"), linewidth = 1, linetype = "dotted", na.rm = TRUE) +
    geom_ribbon(aes(ymin = lower_ci, ymax = upper_ci), alpha = 0.2, fill = "red", na.rm = TRUE) +
    labs(title = paste("Cumulative Density Comparison for", sex, "in", race),
         x = "Age",
         y = "Cumulative Density") +
    theme_minimal() +
    scale_color_manual(values = c("Data-generating penetrance" = "blue", 
                                  "Estimated penetrance" = "red")) +
    scale_y_continuous(labels = scales::percent) +
    theme(legend.title = element_blank())

  print(p)

  # Calculate Mean Squared Error (MSE)
  mse <- mean((plot_df$cumulative_density_panelpro - plot_df$mean_density)^2, na.rm = TRUE)
  cat("Mean Squared Error (MSE):", mse, "\n")

  # Calculate Confidence Interval Coverage
  coverage <- mean((plot_df$cumulative_density_panelpro >= plot_df$lower_ci) & 
                   (plot_df$cumulative_density_panelpro <= plot_df$upper_ci), na.rm = TRUE)
  cat("Confidence Interval Coverage:", coverage, "\n")
}

# Plot
plot_penetrance_comparison(
  data = out_sim_COL_MLH1_sim130$combined_chains,
  db_sim = PanelPRODatabase,
  prob = 0.95,
  max_age = 94,
  cancer = "Colorectal",
  gene = "MLH1_hetero_anyPV",
  sex = "Female",
  race = "All_Races",
  type = "Net"
)

plot_penetrance_comparison(
  data = out_sim_COL_MLH1_sim130$combined_chains,
  db_sim = PanelPRODatabase,
  prob = 0.95,
  max_age = 94,
  cancer = "Colorectal",
  gene = "MLH1_hetero_anyPV",
  sex = "Male",
  race = "All_Races",
  type = "Net"
)


```


## ACF Plots


```{r acf2, echo=TRUE, cache=FALSE}
##Â ACF Plots 
acf(out_sim_COL_MLH1_simLarge$results[[1]]$first_quartile_male_samples, main = "ACF of First Quartile - Male")
acf(out_sim_COL_MLH1_simLarge$results[[1]]$first_quartile_female_samples, main = "ACF of First Quartile - Female")
acf(out_sim_COL_MLH1_simLarge$results[[1]]$median_male_samples, main = "ACF of Median - Male")
acf(out_sim_COL_MLH1_simLarge$results[[1]]$median_female_samples, main = "ACF of Median - Female")
acf(out_sim_COL_MLH1_simLarge$results[[1]]$threshold_male_samples, main = "ACF of Threshold - Male")
acf(out_sim_COL_MLH1_simLarge$results[[1]]$threshold_female_samples, main = "ACF of Threshold - Female")
```

## Trace Plots for Greek-Letter Parameters (standard Weibull parameters)

```{r t2, echo=TRUE, cache=FALSE}
# Function to calculate Weibull parameters
calculate_weibull_parameters <- function(given_median, given_first_quartile, delta) {
  # Calculate alpha
  alpha <- log(-log(0.5) / -log(0.75)) / log((given_median - delta) / (given_first_quartile - delta))
  
  # Calculate beta using the median (M)
  beta <- (given_median - delta) / (-log(0.5))^(1 / alpha)
  
  return(list(alpha = alpha, beta = beta))
}

# Adding alpha and beta parameters to the out object
calculate_and_add_params <- function(out) {
  alphas_male <- numeric(length(out$median_male_results))
  betas_male <- numeric(length(out$median_male_results))
  alphas_female <- numeric(length(out$median_female_results))
  betas_female <- numeric(length(out$median_female_results))
  
  for (i in seq_along(out$median_male_results)) {
    male_params <- calculate_weibull_parameters(out$median_male_results[i], out$first_quartile_male_results[i], out$threshold_male_results[i])
    alphas_male[i] <- male_params$alpha
    betas_male[i] <- male_params$beta
    
    female_params <- calculate_weibull_parameters(out$median_female_results[i], out$first_quartile_female_results[i], out$threshold_female_results[i])
    alphas_female[i] <- female_params$alpha
    betas_female[i] <- female_params$beta
  }
  
  out$alpha_male <- alphas_male
  out$beta_male <- betas_male
  out$alpha_female <- alphas_female
  out$beta_female <- betas_female
  
  return(out)
}

# Example usage:
out_sim_COL_MLH1_simLarge_paras <- calculate_and_add_params(out_sim_COL_MLH1_simLarge$combined_chains)


# Creating the trace plot function
create_trace_plot <- function(parameter_values, parameter_name, gender) {
  data <- data.frame(iteration = 1:length(parameter_values), value = parameter_values)
  ggplot(data, aes(x = iteration, y = value)) +
    geom_line() +
    labs(title = paste("Trace Plot for", parameter_name), x = "Iteration", y = parameter_name) +
    theme_minimal()
}

# Trace plots for male parameters
trace_alpha_male <- create_trace_plot(out_sim_COL_MLH1_simLarge_paras$alpha_male, "Alpha (Shape) - Male")
trace_beta_male <- create_trace_plot(out_sim_COL_MLH1_simLarge_paras$beta_male, "Beta (Scale) - Male")
trace_gamma_male <- create_trace_plot(out_sim_COL_MLH1_simLarge_paras$asymptote_male_results, "Gamma (Asymptote) - Male")
trace_delta_male <- create_trace_plot(out_sim_COL_MLH1_simLarge_paras$threshold_male_results, "Delta (Threshold) - Male")

# Trace plots for female parameters
trace_alpha_female <- create_trace_plot(out_sim_COL_MLH1_simLarge_paras$alpha_female, "Alpha (Shape) - Female")
trace_beta_female <- create_trace_plot(out_sim_COL_MLH1_simLarge_paras$beta_female, "Beta (Scale) - Female")
trace_gamma_female <- create_trace_plot(out_sim_COL_MLH1_simLarge_paras$asymptote_female_results, "Gamma (Asymptote) - Female")
trace_delta_female <- create_trace_plot(out_sim_COL_MLH1_simLarge_paras$threshold_female_results, "Delta (Threshold) - Female")

# Arrange plots in a grid
grid.arrange(trace_alpha_male, trace_beta_male, trace_gamma_male, trace_delta_male, ncol = 2)
grid.arrange(trace_alpha_female, trace_beta_female, trace_gamma_female, trace_delta_female, ncol = 2)

```


## Pair Plots of Parameters

```{r a2, echo=TRUE, cache=FALSE}
# Function to calculate Weibull parameters
calculate_weibull_parameters <- function(given_median, given_first_quartile, delta) {
  # Calculate alpha
  alpha <- log(-log(0.5) / -log(0.75)) / log((given_median - delta) / (given_first_quartile - delta))
  
  # Calculate beta using the median (M)
  beta <- (given_median - delta) / (-log(0.5))^(1 / alpha)
  
  return(list(alpha = alpha, beta = beta))
}

# Function to create pair plots from MCMC chain results for males
plot_mcmc_results_male <- function(mcmc_results) {
  # Calculate Weibull parameters for each sample in the MCMC chain
  weibull_params <- mapply(calculate_weibull_parameters, 
                           given_median = mcmc_results$median_male_results, 
                           given_first_quartile = mcmc_results$first_quartile_male_results, 
                           delta = mcmc_results$threshold_male_results, 
                           SIMPLIFY = FALSE)
  
  alpha_male <- sapply(weibull_params, function(x) x$alpha)
  beta_male <- sapply(weibull_params, function(x) x$beta)
  
  # Create a data frame with the MCMC chain results and calculated Weibull parameters for males
  mcmc_df_male <- data.frame(
    asymptote_male = mcmc_results$asymptote_male_results, 
    threshold_male = mcmc_results$threshold_male_results, 
    median_male = mcmc_results$median_male_results, 
    first_quartile_male = mcmc_results$first_quartile_male_results,
    alpha_male = alpha_male,
    beta_male = beta_male
  )
  
  # Create pair plots with smaller dot sizes for males
  pairs_plot_male <- ggpairs(mcmc_df_male, 
                             columns = c("alpha_male", "beta_male", "threshold_male", "asymptote_male", "median_male", "first_quartile_male"),
                             title = "Pair Plot of MCMC Results (Male)",
                             lower = list(continuous = wrap("points", size = 0.5)))
                             
  # Display the plot
  print(pairs_plot_male)
}

# Function to create pair plots from MCMC chain results for females
plot_mcmc_results_female <- function(mcmc_results) {
  # Calculate Weibull parameters for each sample in the MCMC chain
  weibull_params <- mapply(calculate_weibull_parameters, 
                           given_median = mcmc_results$median_female_results, 
                           given_first_quartile = mcmc_results$first_quartile_female_results, 
                           delta = mcmc_results$threshold_female_results, 
                           SIMPLIFY = FALSE)
  
  alpha_female <- sapply(weibull_params, function(x) x$alpha)
  beta_female <- sapply(weibull_params, function(x) x$beta)
  
  # Create a data frame with the MCMC chain results and calculated Weibull parameters for females
  mcmc_df_female <- data.frame(
    asymptote_female = mcmc_results$asymptote_female_results, 
    threshold_female = mcmc_results$threshold_female_results, 
    median_female = mcmc_results$median_female_results, 
    first_quartile_female = mcmc_results$first_quartile_female_results,
    alpha_female = alpha_female,
    beta_female = beta_female
  )
  
  # Create pair plots with smaller dot sizes for females
  pairs_plot_female <- ggpairs(mcmc_df_female, 
                               columns = c("alpha_female", "beta_female", "threshold_female", "asymptote_female", "median_female", "first_quartile_female"),
                               title = "Pair Plot of MCMC Results (Female)",
                               lower = list(continuous = wrap("points", size = 0.5)))
                               
  
  # Display the plot
  print(pairs_plot_female)
}
# Example usage
# Assuming out_sim_COL_MLH1_simLarge$combined_chains contains the MCMC results as described
plot_mcmc_results_male(out_sim_COL_MLH1_simLarge$combined_chains)
plot_mcmc_results_female(out_sim_COL_MLH1_simLarge$combined_chains)
```

